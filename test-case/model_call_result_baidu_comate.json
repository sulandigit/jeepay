{
  "java_ut_eval_case#jeepay#0": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport com.jeequan.jeepay.service.mapper.RefundOrderMapper;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class RefundOrderServiceTest {\n\n    @InjectMocks private RefundOrderService refundOrderService;\n\n    @Mock private RefundOrderMapper refundOrderMapper;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_ING() {\n        when(refundOrderMapper.updateByMap(any())).thenReturn(1);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 2, \"2\", \"999\", \"error\");\n        assertTrue(result);\n\n        result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 2, \"2\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_FAIL() {\n        when(refundOrderMapper.updateByMap(any())).thenReturn(1);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 3, \"2\", \"999\", \"error\");\n        assertTrue(result);\n\n        result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 3, \"2\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_SUCCESS() {\n        when(refundOrderMapper.updateByMap(any())).thenReturn(1);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 4, \"2\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_FALSE() {\n        when(refundOrderMapper.updateByMap(any())).thenReturn(0);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1\", (byte) 4, \"2\", null, null);\n        assertFalse(result);\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RefundOrderServiceTest {\n\n    @InjectMocks private RefundOrderService refundOrderService;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_IngState() {\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"refundOrderId\", RefundOrder.STATE_ING, \"channelOrderNo\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_SuccessState() {\n        when(refundOrderService.updateIng2Success(\"refundOrderId\", \"channelOrderNo\")).thenReturn(true);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"refundOrderId\", RefundOrder.STATE_SUCCESS, \"channelOrderNo\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_FailState() {\n        when(refundOrderService.updateIng2Fail(\"refundOrderId\", \"channelOrderNo\", \"channelErrCode\", \"channelErrMsg\")).thenReturn(true);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"refundOrderId\", RefundOrder.STATE_FAIL, \"channelOrderNo\", \"channelErrCode\", \"channelErrMsg\");\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_InvalidState() {\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"refundOrderId\", (byte) 9, \"channelOrderNo\", null, null);\n        assertFalse(result);\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport com.jeequan.jeepay.service.mapper.RefundOrderMapper;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class RefundOrderServiceTest {\n\n    @InjectMocks private RefundOrderService refundOrderService;\n\n    @Mock private RefundOrderMapper refundOrderMapper;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_Ing() {\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1001\", (byte) 2, \"202107150000022\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_Success() {\n        when(refundOrderMapper.updateById(any(RefundOrder.class))).thenReturn(1);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1001\", (byte) 10, \"202107150000022\", null, null);\n        assertTrue(result);\n    }\n\n    @Test\n    public void testUpdateIng2SuccessOrFail_Fail() {\n        when(refundOrderMapper.updateById(any(RefundOrder.class))).thenReturn(1);\n        boolean result = refundOrderService.updateIng2SuccessOrFail(\"1001\", (byte) 3, \"202107150000022\", \"errcode\", \"errmsg\");\n        assertTrue(result);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#1": {
    "ut_code": ["package com.jeequan.jeepay.mgr.service;\n\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport com.jeequan.jeepay.service.impl.SysRoleService;\nimport com.jeequan.jeepay.service.impl.SysUserService;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AuthServiceTest {\n\n    @InjectMocks private AuthService authService;\n\n    @Mock private SysUserService sysUserService;\n\n    @Mock private SysRoleService sysRoleService;\n\n    @Mock private RedisUtil redisUtil;\n\n    @Test\n    public void testDelAuthentication() {\n        MockitoAnnotations.initMocks(this);\n        List<Long> sysUserIdList = new ArrayList<>();\n        sysUserIdList.add(1L);\n        sysUserIdList.add(2L);\n        when(redisUtil.keys(anyString())).thenReturn(null).thenReturn(List.of(\"testKey\"));\n\n        authService.delAuthentication(sysUserIdList);\n        Assert.assertTrue(true);\n    }\n}\n\n// test case 2: 模拟两个用户，其中一个有缓存，另一个没有缓存\n// test case 3: 模拟两个用户，其中一个缓存列表为空，另一个不为空\n// test case 4: 模拟一个用户，他的缓存列表为空\n// test case 5: 模拟一个用户，他的缓存列表为null", "package com.jeequan.jeepay.mgr.service;\n\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.service.impl.SysRoleService;\nimport com.jeequan.jeepay.service.impl.SysUserService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AuthServiceTest {\n\n    @MockBean private SysUserService sysUserService;\n\n    @MockBean private SysRoleService sysRoleService;\n\n    @Test\n    public void testDelAuthentication() {\n        AuthService authService = new AuthService();\n        authService.sysUserService = sysUserService;\n        authService.sysRoleService = sysRoleService;\n\n        Mockito.when(sysUserService.list()).thenReturn(getUserList());\n\n        List<Long> sysUserIdList = new ArrayList<>();\n        sysUserIdList.add(1L);\n        sysUserIdList.add(2L);\n\n        RedisUtil.set(CS.getCacheKeyToken(1L, \"token1\"), \"1\", 60);\n        RedisUtil.set(CS.getCacheKeyToken(1L, \"token2\"), \"1\", 60);\n        RedisUtil.set(CS.getCacheKeyToken(2L, \"token1\"), \"1\", 60);\n\n        authService.delAuthentication(sysUserIdList);\n\n        Assert.assertEquals(0, RedisUtil.keys(CS.getCacheKeyToken(1L, \"*\")).size());\n        Assert.assertEquals(1, RedisUtil.keys(CS.getCacheKeyToken(2L, \"*\")).size());\n    }\n\n    private List<SysUser> getUserList() {\n        List<SysUser> userList = new ArrayList<>();\n        SysUser user = new SysUser();\n        user.setUserId(1L);\n        userList.add(user);\n        user = new SysUser();\n        user.setUserId(2L);\n        userList.add(user);\n        return userList;\n    }\n}", "package com.jeequan.jeepay.mgr.service;\n\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.service.impl.SysRoleService;\nimport com.jeequan.jeepay.service.impl.SysUserService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AuthServiceTest {\n\n    @MockBean private SysUserService sysUserService;\n\n    @MockBean private SysRoleService sysRoleService;\n\n    @Test\n    public void testDelAuthentication() {\n        AuthService authService = new AuthService();\n        AuthService spiedAuthService = Mockito.spy(authService);\n        spiedAuthService.delAuthentication(null);\n\n        // 验证是否有缓存KEY，并且被删除\n        List<Long> userIdList = new ArrayList<>();\n        userIdList.add(1L);\n        userIdList.add(2L);\n        userIdList.add(3L);\n        RedisUtil.set(CS.getCacheKeyToken(1L, \"token1\"), \"1\");\n        RedisUtil.set(CS.getCacheKeyToken(2L, \"token2\"), \"1\");\n        RedisUtil.set(CS.getCacheKeyToken(3L, \"token3\"), \"1\");\n        RedisUtil.set(CS.getCacheKeyToken(1L, \"token4\"), \"1\");\n        RedisUtil.set(CS.getCacheKeyToken(2L, \"token5\"), \"1\");\n        RedisUtil.set(CS.getCacheKeyToken(3L, \"token6\"), \"1\");\n        spiedAuthService.delAuthentication(userIdList);\n        Assert.assertEquals(null, RedisUtil.get(CS.getCacheKeyToken(1L, \"token1\")));\n        Assert.assertEquals(null, RedisUtil.get(CS.getCacheKeyToken(2L, \"token2\")));\n        Assert.assertEquals(null, RedisUtil.get(CS.getCacheKeyToken(3L, \"token3\")));\n        Assert.assertEquals(\"1\", RedisUtil.get(CS.getCacheKeyToken(1L, \"token4\")));\n        Assert.assertEquals(\"1\", RedisUtil.get(CS.getCacheKeyToken(2L, \"token5\")));\n        Assert.assertEquals(\"1\", RedisUtil.get(CS.getCacheKeyToken(3L, \"token6\")));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#2": {
    "ut_code": ["import static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class ChannelOrderReissueServiceTest {\n\n    @InjectMocks private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock private PayOrderService payOrderService;\n\n    @Mock private IRefundService iRefundService;\n\n    @Mock private ConfigContextQueryService configContextQueryService;\n\n    @Mock private RefundOrderProcessService refundOrderProcessService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Success() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        ChannelRetMsg channelRetMsg = mock(ChannelRetMsg.class);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenReturn(channelRetMsg);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        verify(iRefundService).query(refundOrder, mchAppConfigContext);\n        verify(refundOrderProcessService).handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Fail_ChannelNotExists() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(null);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Fail_ChannelQueryError() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenReturn(null);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Error() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenThrow(new RuntimeException(\"error\"));\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n}","import static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class ChannelOrderReissueServiceTest {\n\n    @InjectMocks private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock private PayOrderService payOrderService;\n\n    @Mock private IRefundService iRefundService;\n\n    @Mock private ConfigContextQueryService configContextQueryService;\n\n    @Mock private RefundOrderProcessService refundOrderProcessService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Success() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        ChannelRetMsg channelRetMsg = mock(ChannelRetMsg.class);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenReturn(channelRetMsg);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        verify(iRefundService, times(1)).query(refundOrder, mchAppConfigContext);\n        verify(refundOrderProcessService, times(1)).handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_IRefundService_Not_Exists() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mock(MchAppConfigContext.class));\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_IRefundService_Query_Return_Null() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenReturn(null);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Exception() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"test\");\n        MchAppConfigContext mchAppConfigContext = mock(MchAppConfigContext.class);\n        when(configContextQueryService.queryMchInfoAndAppInfo(anyString(), anyString())).thenReturn(mchAppConfigContext);\n        when(iRefundService.query(refundOrder, mchAppConfigContext)).thenThrow(new RuntimeException(\"error\"));\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n}","import static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class ChannelOrderReissueServiceTest {\n\n    @InjectMocks private ChannelOrderReissueService channelOrderReissueService;\n    @Mock private PayOrderService payOrderService;\n    @Mock private ConfigContextQueryService configContextQueryService;\n    @Mock private PayOrderProcessService payOrderProcessService;\n    @Mock private RefundOrderProcessService refundOrderProcessService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Success() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"ALI\");\n        when(refundOrder.getRefundOrderId()).thenReturn(\"123\");\n        IRefundService iRefundService = mock(IRefundService.class);\n        when(iRefundService.query(refundOrder, any(MchAppConfigContext.class)))\n                .thenReturn(ChannelRetMsg.confirmSuccess(\"123\"));\n        mockSpringBean(IRefundService.class, \"ALIRefundService\", iRefundService);\n\n        ChannelRetMsg channelRetMsg = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNotNull(channelRetMsg);\n        verify(refundOrderProcessService, times(1)).handleRefundOrder4Channel(any(ChannelRetMsg.class), eq(refundOrder));\n    }\n\n    @Test\n    public void testProcessRefundOrder_Fail_ChannelNotExists() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"ABC\");\n        when(refundOrder.getRefundOrderId()).thenReturn(\"123\");\n\n        ChannelRetMsg channelRetMsg = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(channelRetMsg);\n    }\n\n    @Test\n    public void testProcessRefundOrder_Error_ChannelServiceError() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getIfCode()).thenReturn(\"ALI\");\n        when(refundOrder.getRefundOrderId()).thenReturn(\"123\");\n        IRefundService iRefundService = mock(IRefundService.class);\n        when(iRefundService.query(refundOrder, any(MchAppConfigContext.class)))\n                .thenThrow(new RuntimeException(\"error\"));\n        mockSpringBean(IRefundService.class, \"ALIRefundService\", iRefundService);\n\n        ChannelRetMsg channelRetMsg = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(channelRetMsg);\n    }\n\n    private void mockSpringBean(Class<?> clazz, String beanName, Object object) {\n        SpringBeansUtil.setBean(beanName, object);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#3": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n    @InjectMocks private SysConfigService sysConfigService;\n\n    @Mock private SysConfigMapper sysConfigMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        // 初始化mock数据\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n\n        // 设置mock数据返回结果\n        when(sysConfigMapper.update(any(SysConfig.class), any(LambdaQueryWrapper.class))).thenReturn(1);\n\n        // 执行方法\n        int count = sysConfigService.updateByConfigKey(updateMap);\n\n        // 验证结果\n        Assert.assertEquals(2, count);\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n\n    @InjectMocks private SysConfigService sysConfigService;\n\n    @Mock private SysConfigMapper sysConfigMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n        updateMap.put(\"key3\", \"value3\");\n\n        SysConfig sysConfig1 = new SysConfig();\n        sysConfig1.setConfigKey(\"key1\");\n        sysConfig1.setConfigVal(\"value1\");\n\n        SysConfig sysConfig2 = new SysConfig();\n        sysConfig2.setConfigKey(\"key2\");\n        sysConfig2.setConfigVal(\"value2\");\n\n        SysConfig sysConfig3 = new SysConfig();\n        sysConfig3.setConfigKey(\"key3\");\n        sysConfig3.setConfigVal(\"value3\");\n\n        // mock saveOrUpdate 返回值\n        // when(sysConfigService.saveOrUpdate(sysConfig1)).thenReturn(true);\n        // when(sysConfigService.saveOrUpdate(sysConfig2)).thenReturn(true);\n        // when(sysConfigService.saveOrUpdate(sysConfig3)).thenReturn(false);\n        // when(sysConfigService.saveOrUpdate(any())).thenReturn(true);\n\n        // int count = sysConfigService.updateByConfigKey(updateMap);\n        // Assert.assertEquals(2, count);\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n\n    @InjectMocks private SysConfigService sysConfigService;\n\n    @Mock private SysConfigMapper sysConfigMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"test_key\", \"test_value\");\n        SysConfig sysConfig = new SysConfig();\n        sysConfig.setConfigKey(\"test_key\");\n        sysConfig.setConfigVal(\"test_value\");\n        int count = 1;\n        // mock方法\n        org.mockito.Mockito.when(sysConfigService.saveOrUpdate(sysConfig)).thenReturn(true);\n        // 调用方法\n        int result = sysConfigService.updateByConfigKey(updateMap);\n        // 验证结果\n        Assert.assertEquals(count, result);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#4": {
    "ut_code": ["package com.jeequan.jeepay.core.beans;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class RequestKitBeanTest {\n\n    @Mock\n    private HttpServletRequest request;\n\n    @InjectMocks\n    private RequestKitBean requestKitBean;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testGetClientIp_WithXForwardedFor() {\n        // Setup\n        String expectedIp = \"10.10.10.10\";\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(expectedIp);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(expectedIp, actualIp);\n    }\n\n    @Test\n    public void testGetClientIp_WithXForwardedFor_MultipleValues() {\n        // Setup\n        String expectedIp = \"10.10.10.10\";\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(expectedIp + \",\" + expectedIp + \", \" + expectedIp);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(expectedIp, actualIp);\n    }\n\n    @Test\n    public void testGetClientIp_WithoutXForwardedFor_WithProxyClientIP() {\n        // Setup\n        String expectedIp = \"10.10.10.10\";\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(expectedIp);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(expectedIp, actualIp);\n    }\n\n    @Test\n    public void testGetClientIp_WithRemoteAddr() {\n        // Setup\n        String expectedIp = \"10.10.10.10\";\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"\");\n        when(request.getRemoteAddr()).thenReturn(expectedIp);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(expectedIp, actualIp);\n    }\n\n    @Test\n    public void testGetClientIp_WithMultipleHeaders() {\n        // Setup\n        String xForwardedForIp = \"10.10.10.10\";\n        String proxyClientIP = \"10.10.10.20\";\n        String remoteAddr = \"10.10.10.30\";\n\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(xForwardedForIp);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(proxyClientIP);\n        when(request.getRemoteAddr()).thenReturn(remoteAddr);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(xForwardedForIp, actualIp);\n    }\n\n    @Test\n    public void testGetClientIp_WithSpecialCharacters() {\n        // Setup\n        String xForwardedForIp = \"10.10.10.10\";\n        String proxyClientIP = \"10.10.10.20\";\n        String remoteAddr = \"10.10.10.30\";\n\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(xForwardedForIp);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(proxyClientIP);\n        when(request.getRemoteAddr()).thenReturn(remoteAddr);\n\n        // Execute\n        String actualIp = requestKitBean.getClientIp();\n\n        // Verify\n        assertEquals(xForwardedForIp, actualIp);\n    }\n}","import com.jeequan.jeepay.core.beans.RequestKitBean;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.Spy;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class RequestKitBeanTest {\n\n    @Spy\n    private RequestKitBean requestKitBean;\n\n    private HttpServletRequest request;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        request = Mockito.mock(HttpServletRequest.class);\n        requestKitBean = new RequestKitBean();\n        requestKitBean.request = request;\n    }\n\n    @Test\n    public void testGetClientIp_WithXForwardedFor() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertEquals(\"192.168.1.1\", result);\n    }\n\n    @Test\n    public void testGetClientIp_WithXForwardedForEmpty() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertNull(result);\n    }\n\n    @Test\n    public void testGetClientIp_WithXForwardedForUnknown() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"unknown\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertNull(result);\n    }\n\n    @Test\n    public void testGetClientIp_WithoutXForwardedFor() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        Mockito.when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        Mockito.when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(null);\n        Mockito.when(request.getRemoteAddr()).thenReturn(\"192.168.1.2\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertEquals(\"192.168.1.2\", result);\n    }\n\n    @Test\n    public void testGetClientIp_WithMultipleXForwardedFor() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1,192.168.1.2,192.168.1.3\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertEquals(\"192.168.1.1\", result);\n    }\n\n    @Test\n    public void testGetClientIp_WithMultipleXForwardedForAndEmpty() {\n        Mockito.when(request.getHeader(\"x-forwarded-for\")).thenReturn(\",192.168.1.1,\");\n        String result = requestKitBean.getClientIp();\n        Assert.assertEquals(\"192.168.1.1\", result);\n    }\n}","package com.jeequan.jeepay.core.beans;\n\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class RequestKitBeanTest {\n\n    @InjectMocks private RequestKitBean requestKitBean;\n    @Mock private HttpServletRequest request;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testGetClientIp_1() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"1.1.1.1\");\n        Assert.assertEquals(\"1.1.1.1\", requestKitBean.getClientIp());\n    }\n\n    @Test\n    public void testGetClientIp_2() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"2.2.2.2\");\n        Assert.assertEquals(\"2.2.2.2\", requestKitBean.getClientIp());\n    }\n\n    @Test\n    public void testGetClientIp_3() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"\");\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"3.3.3.3\");\n        Assert.assertEquals(\"3.3.3.3\", requestKitBean.getClientIp());\n    }\n\n    @Test\n    public void testGetClientIp_4() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"\");\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"\");\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"\");\n        when(request.getRemoteAddr()).thenReturn(\"4.4.4.4\");\n        Assert.assertEquals(\"4.4.4.4\", requestKitBean.getClientIp());\n    }\n\n    @Test\n    public void testGetClientIp_5() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"5.5.5.5, 6.6.6.6, 7.7.7.7\");\n        Assert.assertEquals(\"5.5.5.5\", requestKitBean.getClientIp());\n    }\n\n    @Test\n    public void testGetClientIp_6() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"unknown, 6.6.6.6, 7.7.7.7\");\n        Assert.assertEquals(\"6.6.6.6\", requestKitBean.getClientIp());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#5": {
    "ut_code": ["package com.jeequan.jeepay.components.mq.vender.rabbitmq;\n\nimport com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport com.jeequan.jeepay.core.utils.SpringBeansUtil;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.*;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RabbitMQConfigTest {\n\n    @InjectMocks\n    private RabbitMQConfig rabbitMQConfig;\n\n    @Mock\n    private RabbitMQBeanProcessor rabbitMQBeanProcessor;\n\n    @Mock\n    private Binding binding;\n\n    @Mock\n    private Queue queue;\n\n    @Mock\n    private CustomExchange delayedExchange;\n\n    private DefaultListableBeanFactory beanFactory;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        beanFactory = new DefaultListableBeanFactory();\n        SpringBeansUtil.setApplicationContext(mock(ApplicationContext.class));\n        when(SpringBeansUtil.getBean(anyString(), any(Class.class))).thenAnswer(invocation -> {\n            if (invocation.getArgument(1).equals(Queue.class)) {\n                return queue;\n            } else if (invocation.getArgument(1).equals(Binding.class)) {\n                return binding;\n            } else {\n                return null;\n            }\n        });\n    }\n\n    @Test\n    public void testInit() {\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(TestMQ.class);\n\n        when(ClassUtil.scanPackageBySuper(anyString(), any(Class.class))).thenReturn(mqClasses);\n\n        rabbitMQConfig.init();\n\n        verify(rabbitMQBeanProcessor, times(1)).registerBeanDefinition(anyString(), any());\n        verify(rabbitMQBeanProcessor, times(1)).beanDefinitionRegistry();\n\n        Assert.assertNotNull(beanFactory.getBean(\"testMQ\"));\n        Assert.assertNotNull(beanFactory.getBean(\"fanout_exchange_testMQ\"));\n        Assert.assertNull(beanFactory.getBean(\"testMQ_DelayedBind\"));\n    }\n\n    @Test\n    public void testInitWithBroadcast() {\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(TestBroadcastMQ.class);\n\n        when(ClassUtil.scanPackageBySuper(anyString(), any(Class.class))).thenReturn(mqClasses);\n\n        rabbitMQConfig.init();\n\n        verify(rabbitMQBeanProcessor, times(1)).registerBeanDefinition(anyString(), any());\n        verify(rabbitMQBeanProcessor, times(1)).beanDefinitionRegistry();\n\n        Assert.assertNotNull(beanFactory.getBean(\"testBroadcastMQ\"));\n        Assert.assertNotNull(beanFactory.getBean(\"fanout_exchange_testBroadcastMQ\"));\n    }\n\n    public static class TestMQ extends AbstractMQ {\n\n        @Override\n        public String getMQName() {\n            return \"testMQ\";\n        }\n\n        @Override\n        public MQSendTypeEnum getMQType() {\n            return MQSendTypeEnum.DIRECT;\n        }\n    }\n\n    public static class TestBroadcastMQ extends AbstractMQ {\n\n        @Override\n        public String getMQName() {\n            return \"testBroadcastMQ\";\n        }\n\n        @Override\n        public MQSendTypeEnum getMQType() {\n            return MQSendTypeEnum.BROADCAST;\n        }\n    }\n}", "package com.jeequan.jeepay.components.mq.vender.rabbitmq;\n\nimport com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport com.jeequan.jeepay.core.utils.SpringBeansUtil;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.*;\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class RabbitMQConfigTest {\n\n    private RabbitMQConfig rabbitMQConfig;\n    private RabbitMQBeanProcessor rabbitMQBeanProcessor;\n    private RabbitMQBeanProcessor rabbitMQBeanProcessorSpy;\n    private SpringBeansUtil springBeansUtil;\n\n    @Before\n    public void setUp() {\n        rabbitMQBeanProcessor = new RabbitMQBeanProcessor();\n        DefaultListableBeanFactory defaultListableBeanFactory = new DefaultListableBeanFactory();\n        defaultListableBeanFactory.registerBeanDefinition(\"delayedExchange\",\n                BeanDefinitionBuilder.rootBeanDefinition(CustomExchange.class).getBeanDefinition());\n        rabbitMQBeanProcessor.beanDefinitionRegistry = defaultListableBeanFactory;\n\n        springBeansUtil = Mockito.mock(SpringBeansUtil.class);\n        SpringBeansUtil.applicationContext = Mockito.mock(ApplicationContext.class);\n        Mockito.when(SpringBeansUtil.applicationContext.getBean(Mockito.anyString(), Mockito.eq(Queue.class)))\n                .thenAnswer(invocation -> {\n                    String queueName = invocation.getArgument(0);\n                    return new Queue(queueName);\n                });\n\n        rabbitMQConfig = new RabbitMQConfig();\n        rabbitMQConfig.rabbitMQBeanProcessor = rabbitMQBeanProcessorSpy = Mockito.spy(rabbitMQBeanProcessor);\n    }\n\n    @Test\n    public void testInit() {\n        Set<Class<?>> classSet = new HashSet<>();\n        classSet.add(TestMQ1.class);\n        classSet.add(TestMQ2.class);\n\n        Mockito.doReturn(classSet).when(rabbitMQBeanProcessorSpy).getMqClasses();\n\n        rabbitMQConfig.init();\n\n        Assert.assertNotNull(SpringBeansUtil.getBean(\"testMq1\", Queue.class));\n        Assert.assertNotNull(SpringBeansUtil.getBean(\"testMq2\", Queue.class));\n        Assert.assertNotNull(SpringBeansUtil.getBean(\"fanout_exchange_testMq1\", FanoutExchange.class));\n        Assert.assertNull(SpringBeansUtil.getBean(\"testMq2_DelayedBind\", Binding.class));\n    }\n\n    static class TestMQ1 extends AbstractMQ {\n        @Override\n        public String getMQName() {\n            return \"testMq1\";\n        }\n\n        @Override\n        public MQSendTypeEnum getMQType() {\n            return MQSendTypeEnum.BROADCAST;\n        }\n    }\n\n    static class TestMQ2 extends AbstractMQ {\n        @Override\n        public String getMQName() {\n            return \"testMq2\";\n        }\n\n        @Override\n        public MQSendTypeEnum getMQType() {\n            return MQSendTypeEnum.DELAYED;\n        }\n    }\n}", "package com.jeequan.jeepay.components.mq.vender.rabbitmq;\n\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport com.jeequan.jeepay.core.utils.SpringBeansUtil;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.amqp.core.*;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class RabbitMQConfigTest {\n\n    @InjectMocks private RabbitMQConfig rabbitMQConfig;\n    @Mock private RabbitMQBeanProcessor rabbitMQBeanProcessor;\n    @Mock private Queue queue;\n    @Mock private CustomExchange customExchange;\n    @Mock private Binding binding;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testInit() {\n        // 模拟被测类中需要扫描的包路径，并返回模拟的类集合\n        Set<Class<?>> mockClassSet = new HashSet<>();\n        mockClassSet.add(MockAbstractMQ.class);\n\n        // 设置 ClassUtil.scanPackageBySuper 的模拟行为\n        try {\n            RabbitMQConfig.class.getDeclaredMethod(\n                    \"init\", new Class[] {});\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n        mockStatic(ClassUtil.class);\n        when(ClassUtil.scanPackageBySuper(anyString(), any())).thenReturn(mockClassSet);\n\n        // 设置 SpringBeansUtil.getBean 的模拟行为\n        when(SpringBeansUtil.getBean(anyString(), any())).thenReturn(queue);\n\n        // 设置 rabbitMQBeanProcessor.beanDefinitionRegistry 的模拟行为\n        when(rabbitMQBeanProcessor.beanDefinitionRegistry.registerBeanDefinition(anyString(), any()))\n                .thenAnswer(\n                        invocation -> {\n                            String beanName = invocation.getArgument(0);\n                            Object bean = invocation.getArgument(1);\n                            if (bean instanceof Queue) {\n                                Assert.assertEquals(beanName, \"mockMQ.name\");\n                            } else if (bean instanceof FanoutExchange) {\n                                Assert.assertEquals(beanName, \"fanout_exchange_mockMQ.name\");\n                            } else if (bean instanceof Binding) {\n                                Assert.assertEquals(beanName, \"mockMQ.name_DelayedBind\");\n                            } else {\n                                Assert.fail(\"Unexpected bean type: \" + bean.getClass());\n                            }\n                            return null;\n                        });\n\n        rabbitMQConfig.init();\n\n        // 验证是否正确调用了相关方法\n        verify(queue, times(1)).getName();\n        verify(rabbitMQBeanProcessor, times(3)).beanDefinitionRegistry(any());\n    }\n\n    private static class MockAbstractMQ extends AbstractMQ {\n\n        @Override\n        public String getMQName() {\n            return \"mockMQ\";\n        }\n\n        @Override\n        public MQSendTypeEnum getMQType() {\n            return MQSendTypeEnum.DELAYED;\n        }\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#6": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PayOrderServiceTest {\n    @Mock private PayOrderMapper payOrderMapper;\n    @Mock private MchInfoMapper mchInfoMapper;\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private PayWayMapper payWayMapper;\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @InjectMocks private PayOrderService service;\n\n    @Before\n    public void setUp() {\n        // 初始化服务类\n        service = new PayOrderService();\n    }\n\n    @Test\n    public void testMainPagePayCount() {\n        // 模拟返回数据\n        List<Map> orderList = new ArrayList<>();\n        orderList.add(Map.of(\"count\", 10, \"pay_state\", 1));\n        orderList.add(Map.of(\"count\", 5, \"pay_state\", 2));\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(orderList);\n\n        List<Map> returnList = service.mainPagePayCount(\"mchNo\", \"2023-06-01\", \"2023-06-30\");\n        assertNotNull(returnList);\n        assertEquals(2, returnList.size());\n        assertEquals(10, returnList.get(0).get(\"count\"));\n        assertEquals(5, returnList.get(1).get(\"count\"));\n\n        // 验证 payOrderMapper.selectOrderCount 是否被调用\n        verify(payOrderMapper, times(1)).selectOrderCount(any());\n    }\n}", "package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PayOrderServiceTest {\n    @Mock private PayOrderMapper payOrderMapper;\n    @Mock private MchInfoMapper mchInfoMapper;\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private PayWayMapper payWayMapper;\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @InjectMocks private PayOrderService service;\n\n    @Before\n    public void setUp() {\n        // 初始化 mock 数据\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(new ArrayList<>());\n    }\n\n    @Test\n    public void testMainPagePayCount() {\n        List<Map> result = service.mainPagePayCount(\"mch_0001\", \"2023-06-01\", \"2023-06-07\");\n        assertNotNull(result);\n        assertEquals(0, result.size());\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(new ArrayList<Map>() {{\n            add(Map.of(\"pay_count\", 1, \"total_amount\", 100.00, \"create_time\", \"2023-06-01 10:00:00\"));\n            add(Map.of(\"pay_count\", 2, \"total_amount\", 200.00, \"create_time\", \"2023-06-02 10:00:00\"));\n            add(Map.of(\"pay_count\", 3, \"total_amount\", 300.00, \"create_time\", \"2023-06-03 10:00:00\"));\n            add(Map.of(\"pay_count\", 4, \"total_amount\", 400.00, \"create_time\", \"2023-06-04 10:00:00\"));\n            add(Map.of(\"pay_count\", 5, \"total_amount\", 500.00, \"create_time\", \"2023-06-05 10:00:00\"));\n            add(Map.of(\"pay_count\", 6, \"total_amount\", 600.00, \"create_time\", \"2023-06-06 10:00:00\"));\n            add(Map.of(\"pay_count\", 7, \"total_amount\", 700.00, \"create_time\", \"2023-06-07 10:00:00\"));\n        }});\n\n        result = service.mainPagePayCount(\"mch_0001\", \"2023-06-01\", \"2023-06-07\");\n        assertNotNull(result);\n        assertEquals(6, result.size());\n        assertEquals(1, result.get(0).get(\"pay_count\"));\n        assertEquals(2, result.get(1).get(\"pay_count\"));\n        assertEquals(3, result.get(2).get(\"pay_count\"));\n        assertEquals(4, result.get(3).get(\"pay_count\"));\n        assertEquals(5, result.get(4).get(\"pay_count\"));\n        assertEquals(6, result.get(5).get(\"pay_count\"));\n    }\n}", "package com.jeequan.jeepay.service.impl;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PayOrderServiceTest {\n    @Mock private PayOrderMapper payOrderMapper;\n    @Mock private MchInfoMapper mchInfoMapper;\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private PayWayMapper payWayMapper;\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @InjectMocks private PayOrderService service;\n\n    @Before\n    public void setUp() {\n        // 初始化mock数据\n        List<Map> mockPayOrderList = new ArrayList<>();\n        List<Map> mockRefundOrderList = new ArrayList<>();\n        for (int i = 0; i < 7; i++) {\n            Map<String, Object> mockMap = new HashMap<>();\n            mockMap.put(\"payOrderId\", \"payOrderId\" + i);\n            mockMap.put(\"count\", i);\n            mockMap.put(\"amount\", i);\n            mockPayOrderList.add(mockMap);\n        }\n        for (int i = 0; i < 7; i++) {\n            Map<String, Object> mockMap = new HashMap<>();\n            mockMap.put(\"payOrderId\", \"payOrderId\" + i);\n            mockMap.put(\"count\", i);\n            mockMap.put(\"amount\", i);\n            mockRefundOrderList.add(mockMap);\n        }\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(mockPayOrderList);\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(mockRefundOrderList);\n    }\n\n    @Test\n    public void testMainPagePayCount() {\n        List<Map> result = service.mainPagePayCount(\"mchNo\", \"2020-06-01\", \"2020-06-30\");\n        assertNotNull(result);\n        assertEquals(7, result.size());\n        for (int i = 0; i < 7; i++) {\n            assertEquals(\"payOrderId\" + i, result.get(i).get(\"payOrderId\"));\n            assertEquals(i, result.get(i).get(\"count\"));\n            assertEquals(i, result.get(i).get(\"amount\"));\n        }\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#7": {
    "ut_code":["package com.jeequan.jeepay.core.model.params.wxpay;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDesenData_WithAppSecret() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"appSecret\");\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":\\\"****\\\",\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":null,\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":null,\\\"serialNo\\\":null,\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n\n    @Test\n    public void testDesenData_WithKey() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setKey(\"key\");\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":null,\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":\\\"****\\\",\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":null,\\\"serialNo\\\":null,\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n\n    @Test\n    public void testDesenData_WithApiV3Key() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setApiV3Key(\"apiV3Key\");\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":null,\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":null,\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":\\\"****\\\",\\\"serialNo\\\":null,\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n\n    @Test\n    public void testDesenData_WithSerialNo() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setSerialNo(\"serialNo\");\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":null,\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":null,\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":null,\\\"serialNo\\\":\\\"****\\\",\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n\n    @Test\n    public void testDesenData_AllFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"appSecret\");\n        params.setKey(\"key\");\n        params.setApiV3Key(\"apiV3Key\");\n        params.setSerialNo(\"serialNo\");\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":\\\"****\\\",\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":\\\"****\\\",\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":\\\"****\\\",\\\"serialNo\\\":\\\"****\\\",\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n\n    @Test\n    public void testDesenData_EmptyFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n\n        String result = params.deSenData();\n        Assert.assertTrue(\"{\\\"appId\\\":null,\\\"appSecret\\\":null,\\\"mchId\\\":null,\\\"oauth2Url\\\":null,\\\"key\\\":null,\\\"signType\\\":null,\\\"apiVersion\\\":null,\\\"apiV3Key\\\":null,\\\"serialNo\\\":null,\\\"cert\\\":null,\\\"apiClientCert\\\":null,\\\"apiClientKey\\\":null}\".equals(result));\n    }\n}", "package com.jeequan.jeepay.core.model.params.wxpay;\n\nimport static org.junit.Assert.*;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.jeequan.jeepay.core.utils.StringKit;\n\nimport org.junit.Test;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDesenData_AppSecretEmpty() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"123456\");\n        String result = params.deSenData();\n        JSONObject jsonObject = JSON.parseObject(result);\n        assertFalse(jsonObject.containsKey(\"appSecret\"));\n    }\n\n    @Test\n    public void testDesenData_KeyEmpty() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setKey(\"123456\");\n        String result = params.deSenData();\n        JSONObject jsonObject = JSON.parseObject(result);\n        assertFalse(jsonObject.containsKey(\"key\"));\n    }\n\n    @Test\n    public void testDesenData_ApiV3KeyEmpty() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setApiV3Key(\"123456\");\n        String result = params.deSenData();\n        JSONObject jsonObject = JSON.parseObject(result);\n        assertFalse(jsonObject.containsKey(\"apiV3Key\"));\n    }\n\n    @Test\n    public void testDesenData_SerialNoEmpty() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setSerialNo(\"123456\");\n        String result = params.deSenData();\n        JSONObject jsonObject = JSON.parseObject(result);\n        assertFalse(jsonObject.containsKey(\"serialNo\"));\n    }\n\n    @Test\n    public void testDesenData_AllFieldsNonEmpty() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"123456\");\n        params.setKey(\"123456\");\n        params.setApiV3Key(\"123456\");\n        params.setSerialNo(\"123456\");\n        String result = params.deSenData();\n        JSONObject jsonObject = JSON.parseObject(result);\n        assertTrue(jsonObject.containsKey(\"appSecret\"));\n        assertTrue(jsonObject.containsKey(\"key\"));\n        assertTrue(jsonObject.containsKey(\"apiV3Key\"));\n        assertTrue(jsonObject.containsKey(\"serialNo\"));\n        assertEquals(\"******\", jsonObject.getString(\"appSecret\"));\n        assertEquals(\"******\", jsonObject.getString(\"key\"));\n        assertEquals(\"******\", jsonObject.getString(\"apiV3Key\"));\n        assertEquals(\"******\", jsonObject.getString(\"serialNo\"));\n    }\n}", "import com.alibaba.fastjson.JSONObject;\nimport com.jeequan.jeepay.core.model.params.wxpay.WxpayIsvParams;\nimport com.jeequan.jeepay.core.utils.StringKit;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDesenData_AllFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppId(\"appId\");\n        params.setAppSecret(\"appSecret\");\n        params.setMchId(\"mchId\");\n        params.setOauth2Url(\"oauth2Url\");\n        params.setKey(\"key\");\n        params.setSignType(\"signType\");\n        params.setApiVersion(\"apiVersion\");\n        params.setApiV3Key(\"apiV3Key\");\n        params.setSerialNo(\"serialNo\");\n        params.setCert(\"cert\");\n        params.setApiClientCert(\"apiClientCert\");\n        params.setApiClientKey(\"apiClientKey\");\n\n        String result = params.deSenData();\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assert.assertEquals(\"appId\", jsonObject.getString(\"appId\"));\n        Assert.assertEquals(\"****\", jsonObject.getString(\"appSecret\"));\n        Assert.assertEquals(\"****\", jsonObject.getString(\"key\"));\n        Assert.assertEquals(\"****\", jsonObject.getString(\"apiV3Key\"));\n        Assert.assertEquals(\"****\", jsonObject.getString(\"serialNo\"));\n        Assert.assertEquals(\"oauth2Url\", jsonObject.getString(\"oauth2Url\"));\n        Assert.assertEquals(\"signType\", jsonObject.getString(\"signType\"));\n        Assert.assertEquals(\"apiVersion\", jsonObject.getString(\"apiVersion\"));\n        Assert.assertEquals(\"cert\", jsonObject.getString(\"cert\"));\n        Assert.assertEquals(\"apiClientCert\", jsonObject.getString(\"apiClientCert\"));\n        Assert.assertEquals(\"apiClientKey\", jsonObject.getString(\"apiClientKey\"));\n    }\n\n    @Test\n    public void testDesenData_SomeFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppId(\"appId\");\n        params.setAppSecret(\"appSecret\");\n        params.setMchId(\"mchId\");\n\n        String result = params.deSenData();\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assert.assertEquals(\"appId\", jsonObject.getString(\"appId\"));\n        Assert.assertEquals(\"****\", jsonObject.getString(\"appSecret\"));\n        Assert.assertFalse(jsonObject.containsKey(\"mchId\"));\n    }\n\n    @Test\n    public void testDesenData_EmptyFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n\n        String result = params.deSenData();\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assert.assertFalse(jsonObject.containsKey(\"appId\"));\n        Assert.assertFalse(jsonObject.containsKey(\"appSecret\"));\n        Assert.assertFalse(jsonObject.containsKey(\"mchId\"));\n    }\n\n    @Test\n    public void testDesenData_NullFields() {\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppId(null);\n        params.setAppSecret(null);\n        params.setMchId(null);\n\n        String result = params.deSenData();\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assert.assertFalse(jsonObject.containsKey(\"appId\"));\n        Assert.assertFalse(jsonObject.containsKey(\"appSecret\"));\n        Assert.assertFalse(jsonObject.containsKey(\"mchId\"));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#8": {
    "ut_code":["package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.exception.BizException;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\n\npublic class IsvInfoServiceTest {\n\n    @InjectMocks private IsvInfoService isvInfoService;\n\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private MchInfoService mchInfoService;\n    @Mock private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Test\n    public void testRemoveByIsvNo_正常() {\n        // mock isvInfo\n        IsvInfo isvInfo = new IsvInfo();\n        isvInfo.setIsvNo(\"test_isv\");\n\n        when(isvInfoMapper.selectById(\"test_isv\")).thenReturn(isvInfo);\n\n        // mock mchInfoService\n        when(mchInfoService.count(any(QueryWrapper.class)))\n                .thenReturn(0, 1)\n                .thenReturn(0);\n\n        // mock payInterfaceConfigService\n        when(payInterfaceConfigService.remove(any(QueryWrapper.class))).thenReturn(true);\n\n        // mock isvInfoService\n        when(isvInfoService.removeById(\"test_isv\")).thenReturn(true);\n\n        // test\n        isvInfoService.removeByIsvNo(\"test_isv\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNo_服务商不存在() {\n        when(isvInfoMapper.selectById(\"test_isv\")).thenReturn(null);\n\n        // test\n        isvInfoService.removeByIsvNo(\"test_isv\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNo_商户存在() {\n        // mock isvInfo\n        IsvInfo isvInfo = new IsvInfo();\n        isvInfo.setIsvNo(\"test_isv\");\n\n        when(isvInfoMapper.selectById(\"test_isv\")).thenReturn(isvInfo);\n\n        // mock mchInfoService\n        when(mchInfoService.count(any(QueryWrapper.class))).thenReturn(1);\n\n        // test\n        isvInfoService.removeByIsvNo(\"test_isv\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNo_支付接口配置删除失败() {\n        // mock isvInfo\n        IsvInfo isvInfo = new IsvInfo();\n        isvInfo.setIsvNo(\"test_isv\");\n\n        when(isvInfoMapper.selectById(\"test_isv\")).thenReturn(isvInfo);\n\n        // mock mchInfoService\n        when(mchInfoService.count(any(QueryWrapper.class))).thenReturn(0);\n\n        // mock payInterfaceConfigService\n        when(payInterfaceConfigService.remove(any(QueryWrapper.class))).thenReturn(false);\n\n        // test\n        isvInfoService.removeByIsvNo(\"test_isv\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNo_服务商删除失败() {\n        // mock isvInfo\n        IsvInfo isvInfo = new IsvInfo();\n        isvInfo.setIsvNo(\"test_isv\");\n\n        when(isvInfoMapper.selectById(\"test_isv\")).thenReturn(isvInfo);\n\n        // mock mchInfoService\n        when(mchInfoService.count(any(QueryWrapper.class))).thenReturn(0);\n\n        // mock payInterfaceConfigService\n        when(payInterfaceConfigService.remove(any(QueryWrapper.class))).thenReturn(true);\n\n        // mock isvInfoService\n        when(isvInfoService.removeById(\"test_isv\")).thenReturn(false);\n\n        // test\n        isvInfoService.removeByIsvNo(\"test_isv\");\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.service.mapper.IsvInfoMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class IsvInfoServiceTest {\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private MchInfoService mchInfoService;\n    @Mock private IsvInfoService isvInfoService;\n    @Mock private PayInterfaceConfigService payInterfaceConfigService;\n\n    @InjectMocks private IsvInfoService isvInfoServiceImpl;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testRemoveByIsvNo() {\n        // 验证 1.查询当前服务商是否存在\n        IsvInfo isvInfo = new IsvInfo();\n        when(isvInfoMapper.selectById(\"1000\")).thenReturn(isvInfo);\n\n        // 验证 2.查询当前服务商下是否存在商户\n        List<MchInfo> mchInfoList = new ArrayList<>();\n        when(mchInfoService.list(any())).thenReturn(mchInfoList);\n\n        // 验证 3.删除当前服务商支付接口配置参数\n        doNothing().when(payInterfaceConfigService).remove(any());\n\n        // 验证 4.删除该服务商\n        when(isvInfoMapper.deleteById(any())).thenReturn(1);\n\n        int result = isvInfoServiceImpl.removeByIsvNo(\"1000\");\n        Assert.assertEquals(1, result);\n\n        verify(isvInfoMapper, times(1)).selectById(\"1000\");\n        verify(mchInfoService, times(1)).list(any());\n        verify(payInterfaceConfigService, times(1)).remove(any());\n        verify(isvInfoMapper, times(1)).deleteById(any());\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.exception.BizException;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class IsvInfoServiceTest {\n\n    @InjectMocks private IsvInfoService isvInfoService;\n    @Mock private MchInfoService mchInfoService;\n    @Mock private IsvInfoMapper isvInfoMapper;\n    @Mock private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Test\n    public void testRemoveByIsvNo_EX() {\n        // 查询当前服务商是否存在\n        IsvInfo isvInfo = new IsvInfo();\n        when(isvInfoService.getById(any())).thenReturn(null);\n        try {\n            isvInfoService.removeByIsvNo(\"isv001\");\n        } catch (BizException e) {\n            Assert.assertEquals(\"该服务商不存在\", e.getMessage());\n        }\n\n        // 查询当前服务商下是否存在商户\n        when(isvInfoService.getById(any())).thenReturn(isvInfo);\n        when(mchInfoService.count(any())).thenReturn(1);\n        try {\n            isvInfoService.removeByIsvNo(\"isv001\");\n        } catch (BizException e) {\n            Assert.assertEquals(\"该服务商下存在商户，不可删除\", e.getMessage());\n        }\n\n        // 删除当前服务商支付接口配置参数\n        when(mchInfoService.count(any())).thenReturn(0);\n        doNothing().when(payInterfaceConfigService).remove(any());\n\n        // 删除该服务商\n        when(isvInfoService.removeById(any())).thenReturn(false);\n        try {\n            isvInfoService.removeByIsvNo(\"isv001\");\n        } catch (BizException e) {\n            Assert.assertEquals(\"删除服务商失败\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testRemoveByIsvNo() {\n        // 查询当前服务商是否存在\n        IsvInfo isvInfo = new IsvInfo();\n        when(isvInfoService.getById(any())).thenReturn(isvInfo);\n\n        // 查询当前服务商下是否存在商户\n        when(mchInfoService.count(any())).thenReturn(0);\n\n        // 删除当前服务商支付接口配置参数\n        doNothing().when(payInterfaceConfigService).remove(any());\n\n        // 删除该服务商\n        when(isvInfoService.removeById(any())).thenReturn(true);\n        isvInfoService.removeByIsvNo(\"isv001\");\n        verify(isvInfoService, times(1)).removeById(\"isv001\");\n        verify(payInterfaceConfigService, times(1)).remove(any(PayInterfaceConfig.class));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#9": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRange_All() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"\");\n        assertEquals(null, dateRange[0]);\n        assertEquals(null, dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Today() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"today\");\n        assertEquals(DateKit.getBegin(new Date()), dateRange[0]);\n        assertEquals(DateKit.getEnd(new Date()), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Yesterday() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"yesterday\");\n        Date yesterdayDate = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        assertEquals(DateKit.getBegin(yesterdayDate), dateRange[0]);\n        assertEquals(DateKit.getEnd(yesterdayDate), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Near2Now() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"near2now|1\");\n        Date nowDate = new Date();\n        Date offsetDate = DateUtil.offsetDay(nowDate, -1).toJdkDate();\n        assertEquals(DateKit.getBegin(offsetDate), dateRange[0]);\n        assertEquals(DateKit.getEnd(nowDate), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Near2Yesterday() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"near2yesterday|1\");\n        Date nowDate = new Date();\n        Date offsetDate = DateUtil.offsetDay(nowDate, -1).toJdkDate();\n        Date nearDate = DateUtil.offsetDay(offsetDate, -1).toJdkDate();\n        assertEquals(DateKit.getBegin(nearDate), dateRange[0]);\n        assertEquals(DateKit.getEnd(offsetDate), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_CustomDate() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"customDate|2022-01-01\");\n        Date beginDate = DateUtil.parseDate(\"2022-01-01\");\n        Date endDate = DateUtil.parseDate(\"2022-01-01 23:59:59.999\");\n        assertEquals(beginDate, dateRange[0]);\n        assertEquals(endDate, dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_CustomDateTime() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 00:00:00|2022-01-02 23:59:59.999\");\n        Date beginDate = DateUtil.parseDateTime(\"2022-01-01 00:00:00\");\n        Date endDate = DateUtil.parseDateTime(\"2022-01-02 23:59:59.999\");\n        assertEquals(beginDate, dateRange[0]);\n        assertEquals(endDate, dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_CustomDateTime_Empty() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"customDateTime||2022-01-02 23:59:59.999\");\n        Date endDate = DateUtil.parseDateTime(\"2022-01-02 23:59:59.999\");\n        assertEquals(null, dateRange[0]);\n        assertEquals(endDate, dateRange[1]);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_Error() {\n        DateKit.getQueryDateRange(\"error|1\");\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRange_All() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"\");\n        assertEquals(null, dateRange[0]);\n        assertEquals(null, dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Today() {\n        Date now = new Date();\n        Date[] dateRange = DateKit.getQueryDateRange(\"today\");\n        assertEquals(DateKit.getBegin(now), dateRange[0]);\n        assertEquals(DateKit.getEnd(now), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Yesterday() {\n        Date now = new Date();\n        Date yesterday = DateKit.getBegin(DateUtil.offsetDay(now, -1));\n        Date[] dateRange = DateKit.getQueryDateRange(\"yesterday\");\n        assertEquals(yesterday, dateRange[0]);\n        assertEquals(DateKit.getEnd(yesterday), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Near2Now() {\n        Date now = new Date();\n        Date offsetDayDate = DateUtil.offsetDay(now, -6).toJdkDate();\n        Date[] dateRange = DateKit.getQueryDateRange(\"near2now|6\");\n        assertEquals(offsetDayDate, dateRange[0]);\n        assertEquals(DateKit.getEnd(now), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_Near2Yesterday() {\n        Date now = new Date();\n        Date yesterday = DateUtil.offsetDay(now, -1).toJdkDate();\n        Date offsetDayDate = DateUtil.offsetDay(yesterday, -6).toJdkDate();\n        Date[] dateRange = DateKit.getQueryDateRange(\"near2yesterday|6\");\n        assertEquals(offsetDayDate, dateRange[0]);\n        assertEquals(DateKit.getEnd(yesterday), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_CustomDate() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"customDate|2023-01-01\");\n        assertEquals(DateUtil.parseDate(\"2023-01-01\"), dateRange[0]);\n        assertEquals(DateUtil.parseDate(\"2023-01-01 23:59:59.999\"), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_CustomDateTime() {\n        Date[] dateRange = DateKit.getQueryDateRange(\"customDateTime|2023-01-01 12:12:12\");\n        assertEquals(DateUtil.parseDateTime(\"2023-01-01 12:12:12\"), dateRange[0]);\n        assertEquals(DateUtil.parseDateTime(\"2023-01-01 12:12:12\"), dateRange[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_InvalidType() {\n        try {\n            DateKit.getQueryDateRange(\"invalidType\");\n        } catch (BizException e) {\n            assertEquals(\"查询时间参数有误\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testGetQueryDateRange_InvalidParams() {\n        try {\n            DateKit.getQueryDateRange(\"today|invalid\");\n        } catch (BizException e) {\n            assertEquals(\"查询时间参数有误\", e.getMessage());\n        }\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRange_1() {\n        Date[] dates = DateKit.getQueryDateRange(\"\");\n        assertEquals(null, dates[0]);\n        assertEquals(null, dates[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRange_2() {\n        Date[] dates = DateKit.getQueryDateRange(\"today\");\n\n        // 测试日期范围和当前日期有关\n        String testDate = DateUtil.formatDateTime(new Date());\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        assertEquals(testDate, beginDate);\n        assertEquals(testDate, endDate);\n    }\n\n    @Test\n    public void testGetQueryDateRange_3() {\n        Date[] dates = DateKit.getQueryDateRange(\"yesterday\");\n\n        // 测试日期范围和昨天有关\n        String testDate = DateUtil.formatDateTime(DateUtil.yesterday());\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        assertEquals(testDate, beginDate);\n        assertEquals(testDate, endDate);\n    }\n\n    @Test\n    public void testGetQueryDateRange_4() {\n        Date[] dates = DateKit.getQueryDateRange(\"near2now|10\");\n\n        // 测试日期范围和当前时间有关\n        String testDate = DateUtil.formatDateTime(new Date());\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        // 确保开始日期是10天前的\n        assertEquals(true, endDate.equals(testDate));\n        assertEquals(true, DateUtil.between(dates[0], dates[1], false).getDays() <= 10);\n    }\n\n    @Test\n    public void testGetQueryDateRange_5() {\n        Date[] dates = DateKit.getQueryDateRange(\"near2yesterday|10\");\n\n        // 测试日期范围和昨天有关\n        String testDate = DateUtil.formatDateTime(DateUtil.yesterday());\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        // 确保开始日期是10天前的\n        assertEquals(true, endDate.equals(testDate));\n        assertEquals(true, DateUtil.between(dates[0], dates[1], false).getDays() <= 10);\n    }\n\n    @Test\n    public void testGetQueryDateRange_6() {\n        Date[] dates = DateKit.getQueryDateRange(\"customDate|2023-01-01,2023-01-07\");\n\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        assertEquals(\"2023-01-01 00:00:00\", beginDate);\n        assertEquals(\"2023-01-07 23:59:59.999\", endDate);\n    }\n\n    @Test\n    public void testGetQueryDateRange_7() {\n        Date[] dates = DateKit.getQueryDateRange(\"customDate|N,2023-01-07\");\n\n        String endDate = DateUtil.formatDateTime(dates[1]);\n\n        assertEquals(null, dates[0]);\n        assertEquals(\"2023-01-07 23:59:59.999\", endDate);\n    }\n\n    @Test\n    public void testGetQueryDateRange_8() {\n        Date[] dates = DateKit.getQueryDateRange(\"customDateTime|2023-01-01 00:00:00,N\");\n\n        String beginDate = DateUtil.formatDateTime(dates[0]);\n\n        assertEquals(\"2023-01-01 00:00:00\", beginDate);\n        assertEquals(null, dates[1]);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_9() {\n        DateKit.getQueryDateRange(\"customDateTime|N,2023-01-07 23:59:59.999\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_10() {\n        DateKit.getQueryDateRange(\"customDateTime|2023-01-01 00:00:00\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_11() {\n        DateKit.getQueryDateRange(\"customDateTime|,2023-01-07 23:59:59.999\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_12() {\n        DateKit.getQueryDateRange(\"customDateTime||2023-01-07 23:59:59.999\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_13() {\n        DateKit.getQueryDateRange(\"customDateTime|2023-01-01 00:00:00,2023-01-07 23:59:59.999|extra\");\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetQueryDateRange_14() {\n        DateKit.getQueryDateRange(\"invalidType|2023-01-01 00:00:00,2023-01-07 23:59:59.999\");\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#10": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_1() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(1L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_2() {\n        assertEquals(\"1.01\", AmountUtil.convertCent2Dollar(101L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_3() {\n        assertEquals(\"10.1\", AmountUtil.convertCent2Dollar(1010L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_4() {\n        assertEquals(\"0.10\", AmountUtil.convertCent2Dollar(10L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_5() {\n        assertEquals(\"-0.10\", AmountUtil.convertCent2Dollar(-10L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_6() {\n        assertEquals(\"-1.01\", AmountUtil.convertCent2Dollar(-101L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_7() {\n        assertEquals(\"-10.1\", AmountUtil.convertCent2Dollar(-1010L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_8() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(0L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_9() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(null));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_10() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_11() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"1\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_12() {\n        assertEquals(\"1.01\", AmountUtil.convertCent2Dollar(\"101\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_13() {\n        assertEquals(\"10.1\", AmountUtil.convertCent2Dollar(\"1010\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_14() {\n        assertEquals(\"0.10\", AmountUtil.convertCent2Dollar(\"10\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_15() {\n        assertEquals(\"-0.10\", AmountUtil.convertCent2Dollar(\"-10\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_16() {\n        assertEquals(\"-1.01\", AmountUtil.convertCent2Dollar(\"-101\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_17() {\n        assertEquals(\"-10.1\", AmountUtil.convertCent2Dollar(\"-1010\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_18() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(\"0\"));\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_Normal() {\n        assertEquals(\"100.00\", AmountUtil.convertCent2Dollar(10000L));\n        assertEquals(\"100.10\", AmountUtil.convertCent2Dollar(10010L));\n        assertEquals(\"100.12\", AmountUtil.convertCent2Dollar(10012L));\n        assertEquals(\"100.123\", AmountUtil.convertCent2Dollar(100123L));\n        assertEquals(\"100.1234\", AmountUtil.convertCent2Dollar(1001234L));\n        assertEquals(\"100.12345\", AmountUtil.convertCent2Dollar(10012345L));\n        assertEquals(\"100.123456\", AmountUtil.convertCent2Dollar(100123456L));\n        assertEquals(\"100.1234567\", AmountUtil.convertCent2Dollar(1001234567L));\n        assertEquals(\"100.12345678\", AmountUtil.convertCent2Dollar(10012345678L));\n        assertEquals(\"100.123456789\", AmountUtil.convertCent2Dollar(100123456789L));\n        assertEquals(\"100.1234567890\", AmountUtil.convertCent2Dollar(1001234567890L));\n        assertEquals(\"100.12345678901\", AmountUtil.convertCent2Dollar(10012345678901L));\n        assertEquals(\"100.123456789012\", AmountUtil.convertCent2Dollar(100123456789012L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_Negative() {\n        assertEquals(\"-100.00\", AmountUtil.convertCent2Dollar(-10000L));\n        assertEquals(\"-100.10\", AmountUtil.convertCent2Dollar(-10010L));\n        assertEquals(\"-100.12\", AmountUtil.convertCent2Dollar(-10012L));\n        assertEquals(\"-100.123\", AmountUtil.convertCent2Dollar(-100123L));\n        assertEquals(\"-100.1234\", AmountUtil.convertCent2Dollar(-1001234L));\n        assertEquals(\"-100.12345\", AmountUtil.convertCent2Dollar(-10012345L));\n        assertEquals(\"-100.123456\", AmountUtil.convertCent2Dollar(-100123456L));\n        assertEquals(\"-100.1234567\", AmountUtil.convertCent2Dollar(-1001234567L));\n        assertEquals(\"-100.12345678\", AmountUtil.convertCent2Dollar(-10012345678L));\n        assertEquals(\"-100.123456789\", AmountUtil.convertCent2Dollar(-100123456789L));\n        assertEquals(\"-100.1234567890\", AmountUtil.convertCent2Dollar(-1001234567890L));\n        assertEquals(\"-100.12345678901\", AmountUtil.convertCent2Dollar(-10012345678901L));\n        assertEquals(\"-100.123456789012\", AmountUtil.convertCent2Dollar(-100123456789012L));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_EmptyAndNull() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(null));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_SpecialCases() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(0L));\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(1L));\n        assertEquals(\"0.10\", AmountUtil.convertCent2Dollar(10L));\n        assertEquals(\"1.00\", AmountUtil.convertCent2Dollar(100L));\n        assertEquals(\"10.00\", AmountUtil.convertCent2Dollar(1000L));\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_Null() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar((String) null));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_Empty() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_Zero() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(\"0\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_Positive() {\n        assertEquals(\"1234.56\", AmountUtil.convertCent2Dollar(\"123456\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_Negative() {\n        assertEquals(\"-1234.56\", AmountUtil.convertCent2Dollar(\"-123456\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_DecimalPoint1() {\n        assertEquals(\"0.12\", AmountUtil.convertCent2Dollar(\"12\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_DecimalPoint2() {\n        assertEquals(\"123.45\", AmountUtil.convertCent2Dollar(\"12345\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_DecimalPoint3() {\n        assertEquals(\"123456.78\", AmountUtil.convertCent2Dollar(\"12345678\"));\n    }\n    \n    @Test\n    public void testConvertCent2Dollar_LongString() {\n        assertEquals(\"12345678901234567890.12\", AmountUtil.convertCent2Dollar(\"1234567890123456789012\"));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#11": {
    "ut_code": ["package com.jeequan.jeepay.components.oss.service;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.model.DBApplicationConfig;\nimport com.jeequan.jeepay.core.service.ISysConfigService;\nimport com.jeequan.jeepay.components.oss.config.OssYmlConfig;\nimport com.jeequan.jeepay.components.oss.constant.OssSavePlaceEnum;\nimport com.jeequan.jeepay.components.oss.service.LocalFileService;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.mock.web.MockMultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class LocalFileServiceTest {\n\n    @InjectMocks private LocalFileService localFileService;\n\n    @Mock private ISysConfigService sysConfigService;\n\n    @Mock private OssYmlConfig ossYmlConfig;\n\n    @Before\n    public void setUp() {\n        // 初始化配置\n        DBApplicationConfig config = new DBApplicationConfig();\n        config.setOssPublicSiteUrl(\"http://test.jeepay.com\");\n        when(sysConfigService.getDBApplicationConfig()).thenReturn(config);\n\n        when(ossYmlConfig.getOss()).thenReturn(new OssYmlConfig.Oss());\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_PRIVATE() throws IOException {\n        String saveDirAndFileName = \"test/test_upload2PreviewUrl_PRIVATE.txt\";\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"test\", \"test\".getBytes());\n\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, mockMultipartFile, saveDirAndFileName);\n\n        assertEquals(saveDirAndFileName, result);\n        Mockito.verify(sysConfigService, Mockito.never()).getDBApplicationConfig();\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_PUBLIC() throws IOException {\n        OssYmlConfig.Oss oss = new OssYmlConfig.Oss();\n        String filePublicPath = \"test/public/\";\n        oss.setFilePublicPath(filePublicPath);\n        when(ossYmlConfig.getOss()).thenReturn(oss);\n\n        String saveDirAndFileName = \"test/test_upload2PreviewUrl_PUBLIC.txt\";\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"test\", \"test\".getBytes());\n\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, mockMultipartFile, saveDirAndFileName);\n\n        assertEquals(\n                new File(filePublicPath + saveDirAndFileName).getAbsolutePath(),\n                new File(ossYmlConfig.getOss().getFilePublicPath() + saveDirAndFileName).getAbsolutePath());\n        assertEquals(\"http://test.jeepay.com/\" + saveDirAndFileName, result);\n    }\n}","package com.jeequan.jeepay.components.oss.service;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.components.oss.config.OssYmlConfig;\nimport com.jeequan.jeepay.components.oss.config.OssYmlConfig.Oss;\nimport com.jeequan.jeepay.components.oss.constant.OssSavePlaceEnum;\nimport com.jeequan.jeepay.core.model.DBApplicationConfig;\nimport com.jeequan.jeepay.core.service.ISysConfigService;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockMultipartFile;\n\nimport java.io.File;\n\npublic class LocalFileServiceTest {\n    @InjectMocks private LocalFileService localFileService;\n    @Mock private ISysConfigService sysConfigService;\n    @Mock private OssYmlConfig ossYmlConfig;\n    @Mock private Oss oss;\n    @Mock private DBApplicationConfig dbApplicationConfig;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_Public() {\n        when(ossYmlConfig.getOss()).thenReturn(oss);\n        when(oss.getFilePublicPath()).thenReturn(\"/public/path/\");\n        when(sysConfigService.getDBApplicationConfig()).thenReturn(dbApplicationConfig);\n        when(dbApplicationConfig.getOssPublicSiteUrl()).thenReturn(\"http://public.oss.url\");\n\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"test\", \"test.txt\", \"text/plain\", \"test\".getBytes());\n\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, mockMultipartFile, \"test.txt\");\n\n        assertEquals(\"http://public.oss.url/test.txt\", result);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_Private() {\n        when(ossYmlConfig.getOss()).thenReturn(oss);\n        when(oss.getFilePrivatePath()).thenReturn(\"/private/path/\");\n\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"test\", \"test.txt\", \"text/plain\", \"test\".getBytes());\n\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, mockMultipartFile, \"test.txt\");\n\n        assertEquals(\"test.txt\", result);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_FileTransferError() {\n        when(ossYmlConfig.getOss()).thenReturn(oss);\n        when(oss.getFilePublicPath()).thenReturn(\"/public/path/\");\n        when(sysConfigService.getDBApplicationConfig()).thenReturn(dbApplicationConfig);\n        when(dbApplicationConfig.getOssPublicSiteUrl()).thenReturn(\"http://public.oss.url\");\n\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"test\", \"test.txt\", \"text/plain\", \"test\".getBytes());\n\n        //模拟文件传输错误\n        when(mockMultipartFile.transferTo(any(File.class))).thenThrow(new RuntimeException(\"File transfer error\"));\n\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, mockMultipartFile, \"test.txt\");\n\n        assertEquals(\"http://public.oss.url/test.txt\", result);\n    }\n}","import static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.components.oss.config.OssYmlConfig;\nimport com.jeequan.jeepay.components.oss.constant.OssSavePlaceEnum;\nimport com.jeequan.jeepay.components.oss.service.LocalFileService;\nimport com.jeequan.jeepay.core.model.DBApplicationConfig;\nimport com.jeequan.jeepay.core.service.ISysConfigService;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.mock.web.MockMultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class LocalFileServiceTest {\n\n    @InjectMocks private LocalFileService localFileService;\n\n    @Mock private ISysConfigService sysConfigService;\n\n    @Mock private OssYmlConfig ossYmlConfig;\n\n    private String saveDirAndFileName;\n    private String savePath;\n    private String fileRootPath;\n\n    @Before\n    public void setUp() {\n        saveDirAndFileName = \"test/test.txt\";\n        fileRootPath = \"fileRootPath\";\n        savePath = fileRootPath + File.separator + \"test\";\n        when(ossYmlConfig.getOss()).thenReturn(new OssYmlConfig.Oss());\n        when(ossYmlConfig.getOss().getFileRootPath()).thenReturn(fileRootPath);\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(savePath);\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(savePath);\n        DBApplicationConfig dbApplicationConfig = new DBApplicationConfig();\n        dbApplicationConfig.setOssPublicSiteUrl(\"http://test.com/public\");\n        when(sysConfigService.getDBApplicationConfig()).thenReturn(dbApplicationConfig);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_public() {\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"content\", \"test.txt\", \"text/plain\", \"test data\".getBytes());\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, mockMultipartFile, saveDirAndFileName);\n        assertEquals(\"http://test.com/public/\" + saveDirAndFileName, result);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_private() {\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"content\", \"test.txt\", \"text/plain\", \"test data\".getBytes());\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, mockMultipartFile, saveDirAndFileName);\n        assertEquals(saveDirAndFileName, result);\n    }\n\n    @Test\n    public void testUpload2PreviewUrl_fileTransferError() {\n        MockMultipartFile mockMultipartFile = new MockMultipartFile(\"content\", \"test.txt\", \"text/plain\", (byte[]) null);\n        try {\n            localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, mockMultipartFile, saveDirAndFileName);\n            fail();\n        } catch (IOException e) {\n            assertTrue(e instanceof IllegalArgumentException);\n        }\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#12":  {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.entity.SysUser;\nimport com.jeequan.jeepay.core.entity.SysUserAuth;\nimport com.jeequan.jeepay.service.mapper.SysUserMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Date;\n\npublic class SysUserServiceTest {\n\n    @InjectMocks private SysUserService sysUserService;\n    @Mock private SysUserMapper sysUserMapper;\n    @Mock private SysUserAuthService sysUserAuthService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateSysUser() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setLoginUsername(\"old_login_username\");\n        dbUser.setTelphone(\"18000000000\");\n        dbUser.setSysType(\"MCH\");\n        when(sysUserMapper.updateById(any(SysUser.class))).thenReturn(1);\n        when(sysUserMapper.selectById(1L)).thenReturn(dbUser);\n\n        SysUser updateUser = new SysUser();\n        updateUser.setSysUserId(1L);\n        updateUser.setLoginUsername(\"new_login_username\");\n        updateUser.setTelphone(\"18000000010\");\n\n        sysUserService.updateSysUser(updateUser);\n\n        Assert.assertEquals(\"new_login_username\", dbUser.getLoginUsername());\n        Assert.assertEquals(\"18000000010\", dbUser.getTelphone());\n    }\n\n    @Test\n    public void testUpdateSysUser_NoLoginUsernameChange() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setLoginUsername(\"old_login_username\");\n        dbUser.setTelphone(\"18000000000\");\n        dbUser.setSysType(\"MCH\");\n        when(sysUserMapper.updateById(any(SysUser.class))).thenReturn(1);\n        when(sysUserMapper.selectById(1L)).thenReturn(dbUser);\n\n        SysUser updateUser = new SysUser();\n        updateUser.setSysUserId(1L);\n        updateUser.setTelphone(\"18000000010\");\n\n        sysUserService.updateSysUser(updateUser);\n\n        Assert.assertEquals(\"old_login_username\", dbUser.getLoginUsername());\n        Assert.assertEquals(\"18000000010\", dbUser.getTelphone());\n    }\n\n    @Test\n    public void testUpdateSysUser_NoTelphoneChange() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setLoginUsername(\"old_login_username\");\n        dbUser.setTelphone(\"18000000000\");\n        dbUser.setSysType(\"MCH\");\n        when(sysUserMapper.updateById(any(SysUser.class))).thenReturn(1);\n        when(sysUserMapper.selectById(1L)).thenReturn(dbUser);\n\n        SysUser updateUser = new SysUser();\n        updateUser.setSysUserId(1L);\n        updateUser.setLoginUsername(\"new_login_username\");\n\n        sysUserService.updateSysUser(updateUser);\n\n        Assert.assertEquals(\"new_login_username\", dbUser.getLoginUsername());\n        Assert.assertEquals(\"18000000000\", dbUser.getTelphone());\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.entity.SysUser;\nimport com.jeequan.jeepay.core.entity.SysUserAuth;\nimport com.jeequan.jeepay.service.mapper.SysUserMapper;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.mockito.stubbing.Answer;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class SysUserServiceTest {\n\n    @InjectMocks private SysUserService sysUserService;\n    @Mock private SysUserAuthService sysUserAuthService;\n    @Mock private SysUserMapper sysUserMapper;\n\n    @Test\n    public void testUpdateSysUser1() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setSysType(\"MGR\");\n        dbUser.setLoginUsername(\"jeequan888\");\n        dbUser.setTelphone(\"18888888888\");\n\n        when(sysUserMapper.updateById(any(SysUser.class))).thenAnswer((Answer<Integer>) invocation -> 1);\n        sysUserService.updateSysUser(dbUser);\n        Mockito.verify(sysUserAuthService, Mockito.times(0))\n                .resetAuthInfo(any(Long.class), any(String.class), any(String.class), any(String.class), any(String.class));\n    }\n\n    @Test\n    public void testUpdateSysUser2() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setSysType(\"MGR\");\n        dbUser.setLoginUsername(\"jeequan888\");\n        dbUser.setTelphone(\"18888888888\");\n\n        when(sysUserMapper.updateById(any(SysUser.class))).thenAnswer((Answer<Integer>) invocation -> 1);\n\n        when(sysUserMapper.selectCount(any())).thenReturn(0L);\n\n        sysUserService.updateSysUser(dbUser);\n        Mockito.verify(sysUserAuthService, Mockito.times(1))\n                .resetAuthInfo(any(Long.class), any(String.class), any(String.class), any(String.class), any(String.class));\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testUpdateSysUser3() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setSysType(\"MGR\");\n        dbUser.setLoginUsername(\"jeequan888\");\n        dbUser.setTelphone(\"18888888888\");\n\n        when(sysUserMapper.updateById(any(SysUser.class))).thenAnswer((Answer<Integer>) invocation -> 0);\n\n        sysUserService.updateSysUser(dbUser);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testUpdateSysUser4() {\n        SysUser dbUser = new SysUser();\n        dbUser.setSysUserId(1L);\n        dbUser.setSysType(\"MGR\");\n        dbUser.setLoginUsername(\"jeequan888\");\n        dbUser.setTelphone(\"18888888888\");\n\n        when(sysUserMapper.selectById(any(Long.class))).thenReturn(null);\n\n        sysUserService.updateSysUser(dbUser);\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.entity.SysUser;\nimport com.jeequan.jeepay.core.entity.SysUserAuth;\nimport com.jeequan.jeepay.service.mapper.SysUserMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Date;\n\npublic class SysUserServiceTest {\n\n    @InjectMocks private SysUserService sysUserService;\n    @Mock private SysUserMapper sysUserMapper;\n    @Mock private SysUserAuthService sysUserAuthService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateSysUser() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setLoginUsername(\"test\");\n        sysUser.setRealname(\"test\");\n        sysUser.setTelphone(\"18812345678\");\n        sysUser.setSex((byte) 1);\n        sysUser.setAvatarUrl(\"\");\n        sysUser.setUserNo(\"10001\");\n        sysUser.setIsAdmin((byte) 1);\n        sysUser.setState((byte) 1);\n        sysUser.setSysType(\"MGR\");\n        sysUser.setBelongInfoId(\"0\");\n        sysUser.setCreatedAt(new Date());\n        sysUser.setUpdatedAt(new Date());\n\n        when(sysUserMapper.updateById(any(SysUser.class))).thenReturn(1);\n\n        sysUserService.updateSysUser(sysUser);\n        Assert.assertNotNull(sysUser.getUpdatedAt());\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testUpdateSysUser_FAIL() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setLoginUsername(\"test\");\n        sysUser.setRealname(\"test\");\n        sysUser.setTelphone(\"18812345678\");\n        sysUser.setSex((byte) 1);\n        sysUser.setAvatarUrl(\"\");\n        sysUser.setUserNo(\"10001\");\n        sysUser.setIsAdmin((byte) 1);\n        sysUser.setState((byte) 1);\n        sysUser.setSysType(\"MGR\");\n        sysUser.setBelongInfoId(\"0\");\n        sysUser.setCreatedAt(new Date());\n        sysUser.setUpdatedAt(new Date());\n\n        when(sysUserMapper.updateById(any(SysUser.class))).thenThrow(new RuntimeException(\"\"));\n\n        sysUserService.updateSysUser(sysUser);\n        Assert.assertNotNull(sysUser.getUpdatedAt());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#13":{
    "ut_code": ["package com.jeequan.jeepay.core.ctrls;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.beans.RequestKitBean;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport java.util.Map;\n\npublic class AbstractCtrlTest {\n\n    @InjectMocks private AbstractCtrl abstractCtrl;\n    @Mock private HttpServletRequest request;\n    @Mock private RequestKitBean requestKitBean;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testRequest2payResponseMap() {\n        when(request.getParameter(\"test1\")).thenReturn(\"test1\");\n        when(request.getParameter(\"test2\")).thenReturn(\"test2\");\n        Map<String, Object> result = abstractCtrl.request2payResponseMap(request, new String[] {\"test1\", \"test2\"});\n        Assert.assertEquals(2, result.size());\n        Assert.assertEquals(\"test1\", result.get(\"test1\"));\n        Assert.assertEquals(\"test2\", result.get(\"test2\"));\n    }\n}","package com.jeequan.jeepay.core.ctrls;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.beans.RequestKitBean;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Map;\n\npublic class AbstractCtrlTest {\n\n    @InjectMocks private AbstractCtrl abstractCtrl;\n    @Mock private HttpServletRequest request;\n    @Mock private RequestKitBean requestKitBean;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testRequest2payResponseMap() {\n        // 模拟参数\n        String[] paramArray = {\"param1\", \"param2\"};\n\n        // 模拟HttpServletRequest的返回值\n        when(request.getParameter(\"param1\")).thenReturn(\"value1\");\n        when(request.getParameter(\"param2\")).thenReturn(\"value2\");\n\n        // 执行测试\n        Map<String, Object> resultMap = abstractCtrl.request2payResponseMap(request, paramArray);\n\n        // 断言\n        Assert.assertEquals(\"value1\", resultMap.get(\"param1\"));\n        Assert.assertEquals(\"value2\", resultMap.get(\"param2\"));\n    }\n\n    @Test\n    public void testRequest2payResponseMap_EmptyArray() {\n        // 模拟参数\n        String[] paramArray = {};\n\n        // 执行测试\n        Map<String, Object> resultMap = abstractCtrl.request2payResponseMap(request, paramArray);\n\n        // 断言\n        Assert.assertTrue(resultMap.isEmpty());\n    }\n\n    @Test\n    public void testRequest2payResponseMap_NullParam() {\n        // 模拟参数\n        String[] paramArray = null;\n\n        // 执行测试\n        Map<String, Object> resultMap = abstractCtrl.request2payResponseMap(request, paramArray);\n\n        // 断言\n        Assert.assertNotNull(resultMap);\n        Assert.assertTrue(resultMap.isEmpty());\n    }\n\n    @Test\n    public void testRequest2payResponseMap_ParamNotExist() {\n        // 模拟参数\n        String[] paramArray = {\"param1\", \"param2\"};\n\n        // 执行测试\n        Map<String, Object> resultMap = abstractCtrl.request2payResponseMap(request, paramArray);\n\n        // 断言\n        Assert.assertNull(resultMap.get(\"param1\"));\n        Assert.assertNull(resultMap.get(\"param2\"));\n    }\n}","package com.jeequan.jeepay.core.ctrls;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport com.jeequan.jeepay.core.beans.RequestKitBean;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Map;\n\npublic class AbstractCtrlTest {\n    @InjectMocks\n    private AbstractCtrl abstractCtrl;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        abstractCtrl = new AbstractCtrl() {};\n        abstractCtrl.requestKitBean = mock(RequestKitBean.class);\n    }\n\n    @Test\n    public void testRequest2payResponseMap() {\n        when(request.getParameter(\"param1\")).thenReturn(\"value1\");\n        when(request.getParameter(\"param2\")).thenReturn(\"value2\");\n        when(request.getParameter(\"param3\")).thenReturn(null);\n\n        Map<String, Object> result = abstractCtrl.request2payResponseMap(request, new String[]{\"param1\", \"param2\"});\n        Assert.assertNotNull(result);\n        Assert.assertEquals(2, result.size());\n        Assert.assertEquals(\"value1\", result.get(\"param1\"));\n        Assert.assertEquals(\"value2\", result.get(\"param2\"));\n        Assert.assertNull(result.get(\"param3\"));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#14": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.when;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.entity.PayInterfaceDefine;\nimport com.jeequan.jeepay.service.mapper.PayInterfaceConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PayInterfaceConfigServiceTest {\n\n    @Mock private PayInterfaceConfigMapper payInterfaceConfigMapper;\n    @Mock private PayInterfaceDefineService payInterfaceDefineService;\n    @Mock private MchInfoService mchInfoService;\n    @Mock private MchAppService mchAppService;\n\n    @InjectMocks private PayInterfaceConfigService service;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testSelectAllPayIfConfigListByAppId() {\n        MchApp mchApp = new MchApp();\n        mchApp.setState(CS.YES);\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setState(CS.YES);\n        when(mchAppService.getById(anyString())).thenReturn(mchApp);\n        when(mchInfoService.getById(anyString())).thenReturn(mchInfo);\n\n        PayInterfaceDefine define = new PayInterfaceDefine();\n        define.setIfCode(\"ALI_PAY\");\n        define.setState(CS.YES);\n        List<PayInterfaceDefine> defineList = new ArrayList<>();\n        defineList.add(define);\n        when(payInterfaceDefineService.list(any(LambdaQueryWrapper.class))).thenReturn(defineList);\n\n        PayInterfaceConfig config = new PayInterfaceConfig();\n        config.setIfCode(\"ALI_PAY\");\n        config.setState(CS.YES);\n        List<PayInterfaceConfig> configList = new ArrayList<>();\n        configList.add(config);\n        when(payInterfaceConfigMapper.selectList(any(LambdaQueryWrapper.class))).thenReturn(configList);\n\n        List<PayInterfaceDefine> result = service.selectAllPayIfConfigListByAppId(\"APP_000001\");\n        Assert.assertNotNull(result);\n        Assert.assertEquals(1, result.size());\n        Assert.assertEquals(\"ALI_PAY\", result.get(0).getIfCode());\n    }\n}\n","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.entity.PayInterfaceDefine;\nimport com.jeequan.jeepay.service.mapper.PayInterfaceConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PayInterfaceConfigServiceTest {\n\n    @InjectMocks private PayInterfaceConfigService service;\n\n    @Mock private PayInterfaceConfigMapper payInterfaceConfigMapper;\n\n    @Mock private PayInterfaceDefineService payInterfaceDefineService;\n\n    @Mock private MchInfoService mchInfoService;\n\n    @Mock private MchAppService mchAppService;\n\n    @Test\n    public void testSelectAllPayIfConfigListByAppId() {\n        // mock 数据准备\n        String appId = \"appId1\";\n        MchApp mchApp = mock(MchApp.class);\n        when(mchApp.getState()).thenReturn(CS.YES);\n        when(mchAppService.getById(appId)).thenReturn(mchApp);\n\n        MchInfo mchInfo = mock(MchInfo.class);\n        when(mchInfo.getType()).thenReturn((byte) 2);\n        when(mchInfo.getIsvNo()).thenReturn(\"isvNo1\");\n        when(mchInfoService.getById(any())).thenReturn(mchInfo);\n\n        PayInterfaceDefine define1 = mock(PayInterfaceDefine.class);\n        when(define1.getIfCode()).thenReturn(\"ifCode1\");\n        when(define1.getState()).thenReturn(CS.YES);\n        PayInterfaceDefine define2 = mock(PayInterfaceDefine.class);\n        when(define2.getIfCode()).thenReturn(\"ifCode2\");\n        when(define2.getState()).thenReturn(CS.YES);\n        List<PayInterfaceDefine> defineList = new ArrayList<>();\n        defineList.add(define1);\n        defineList.add(define2);\n        when(payInterfaceDefineService.list(any())).thenReturn(defineList);\n\n        PayInterfaceConfig config1 = mock(PayInterfaceConfig.class);\n        when(config1.getIfCode()).thenReturn(\"ifCode1\");\n        when(config1.getState()).thenReturn(CS.YES);\n        PayInterfaceConfig config2 = mock(PayInterfaceConfig.class);\n        when(config2.getIfCode()).thenReturn(\"ifCode3\");\n        when(config2.getState()).thenReturn(CS.YES);\n        List<PayInterfaceConfig> configList = new ArrayList<>();\n        configList.add(config1);\n        configList.add(config2);\n        when(this.payInterfaceConfigMapper.selectList(any())).thenReturn(configList);\n\n        // 调用测试方法\n        List<PayInterfaceDefine> result = service.selectAllPayIfConfigListByAppId(appId);\n\n        // 断言结果\n        Assert.assertNotNull(result);\n        Assert.assertEquals(2, result.size());\n        Assert.assertEquals(\"ifCode1\", result.get(0).getIfCode());\n        Assert.assertEquals(\"Y\", result.get(0).getExt(\"ifConfigState\"));\n        Assert.assertEquals(\"ifCode2\", result.get(1).getIfCode());\n        Assert.assertNull(result.get(1).getExt(\"ifConfigState\"));\n\n        // 验证是否正确调用了相关依赖方法\n        verify(mchAppService, times(1)).getById(appId);\n        verify(mchInfoService, times(1)).getById(any());\n        verify(payInterfaceDefineService, times(1)).list(any());\n        verify(payInterfaceConfigMapper, times(1)).selectList(any());\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.when;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.entity.PayInterfaceDefine;\nimport com.jeequan.jeepay.service.mapper.PayInterfaceConfigMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PayInterfaceConfigServiceTest {\n\n    @Mock private PayInterfaceConfigMapper payInterfaceConfigMapper;\n    @Mock private PayInterfaceDefineService payInterfaceDefineService;\n    @Mock private MchInfoService mchInfoService;\n    @Mock private MchAppService mchAppService;\n\n    @InjectMocks private PayInterfaceConfigService service;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testSelectAllPayIfConfigListByAppId() {\n        MchApp mchApp = new MchApp();\n        mchApp.setState(CS.YES);\n        when(mchAppService.getById(anyString())).thenReturn(mchApp);\n\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setState(CS.YES);\n        mchInfo.setType(CS.MCH_TYPE_NORMAL);\n        when(mchInfoService.getById(anyString())).thenReturn(mchInfo);\n\n        PayInterfaceDefine define = new PayInterfaceDefine();\n        define.setIfCode(\"ALI_PAY\");\n        define.setState(CS.YES);\n        List<PayInterfaceDefine> defineList = new ArrayList<>();\n        defineList.add(define);\n        when(payInterfaceDefineService.list(any(LambdaQueryWrapper.class))).thenReturn(defineList);\n\n        PayInterfaceConfig config = new PayInterfaceConfig();\n        config.setIfCode(\"ALI_PAY\");\n        config.setState(CS.YES);\n        List<PayInterfaceConfig> configList = new ArrayList<>();\n        configList.add(config);\n        when(payInterfaceConfigMapper.selectList(any(LambdaQueryWrapper.class))).thenReturn(configList);\n\n        List<PayInterfaceDefine> result = service.selectAllPayIfConfigListByAppId(\"appId\");\n\n        Assert.assertNotNull(result);\n        Assert.assertEquals(1, result.size());\n        Assert.assertEquals(\"ALI_PAY\", result.get(0).getIfCode());\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#15": {
    "ut_code": ["import static org.mockito.Mockito.*;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.jeequan.jeepay.components.mq.model.PayOrderMchNotifyMQ;\nimport com.jeequan.jeepay.components.mq.vender.IMQSender;\nimport com.jeequan.jeepay.core.entity.MchNotifyRecord;\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.service.ConfigContextQueryService;\nimport com.jeequan.jeepay.service.impl.MchNotifyRecordService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class PayMchNotifyServiceTest {\n\n    @InjectMocks private PayMchNotifyService payMchNotifyService;\n    @Mock private MchNotifyRecordService mchNotifyRecordService;\n    @Mock private ConfigContextQueryService configContextQueryService;\n    @Mock private IMQSender mqSender;\n\n    @Test\n    public void testRefundOrderNotify_success() {\n\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"http://www.notifyurl.com\");\n        when(refundOrder.getRefundOrderId()).thenReturn(\"refundOrderId\");\n        when(refundOrder.getMchNo()).thenReturn(\"mchNo\");\n        when(refundOrder.getMchRefundNo()).thenReturn(\"mchRefundNo\");\n        when(refundOrder.getAppId()).thenReturn(\"appId\");\n\n        MchNotifyRecord mchNotifyRecord = new MchNotifyRecord();\n        mchNotifyRecord.setOrderId(\"refundOrderId\");\n        when(mchNotifyRecordService.findByRefundOrder(\"refundOrderId\")).thenReturn(mchNotifyRecord);\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n        Assert.assertEquals(mchNotifyRecord.getState(), MchNotifyRecord.STATE_ING);\n\n        verify(mqSender).send(PayOrderMchNotifyMQ.build(mchNotifyRecord.getNotifyId()));\n    }\n\n    @Test\n    public void testRefundOrderNotify_withNullNotifyUrl() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"\");\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n        verify(mchNotifyRecordService, never()).findByRefundOrder(any());\n        verify(mqSender, never()).send(any());\n    }\n\n    @Test\n    public void testRefundOrderNotify_withNotifyRecordExists() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"http://www.notifyurl.com\");\n        when(refundOrder.getRefundOrderId()).thenReturn(\"refundOrderId\");\n        when(refundOrder.getMchNo()).thenReturn(\"mchNo\");\n        when(refundOrder.getMchRefundNo()).thenReturn(\"mchRefundNo\");\n        when(refundOrder.getAppId()).thenReturn(\"appId\");\n\n        MchNotifyRecord mchNotifyRecord = new MchNotifyRecord();\n        mchNotifyRecord.setOrderId(\"refundOrderId\");\n        when(mchNotifyRecordService.findByRefundOrder(\"refundOrderId\")).thenReturn(mchNotifyRecord);\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mchNotifyRecordService).findByRefundOrder(\"refundOrderId\");\n        verify(mqSender, never()).send(any());\n    }\n}","package com.jeequan.jeepay.pay.service;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.components.mq.vender.IMQSender;\nimport com.jeequan.jeepay.core.entity.MchNotifyRecord;\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.service.impl.MchNotifyRecordService;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class PayMchNotifyServiceTest {\n\n    @InjectMocks PayMchNotifyService payMchNotifyService;\n    @Mock MchNotifyRecordService mchNotifyRecordService;\n    @Mock ConfigContextQueryService c***********************e;\n    @Mock IMQSender mqSender;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testRefundOrderNotify_success() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"http://www.test.com/notify\");\n        when(c***********************e.queryMchApp(any(), any())).thenReturn(mock(MchApp.class));\n        when(mchNotifyRecordService.findByRefundOrder(any())).thenReturn(null);\n        doNothing().when(mqSender).send(any());\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mchNotifyRecordService, times(1)).findByRefundOrder(any());\n        verify(mqSender, times(1)).send(any());\n    }\n\n    @Test\n    public void testRefundOrderNotify_notifyUrlEmpty() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"\");\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mchNotifyRecordService, never()).findByRefundOrder(any());\n        verify(mqSender, never()).send(any());\n    }\n\n    @Test\n    public void testRefundOrderNotify_notifyRecordExists() {\n        RefundOrder refundOrder = mock(RefundOrder.class);\n        when(refundOrder.getNotifyUrl()).thenReturn(\"http://www.test.com/notify\");\n        when(c***********************e.queryMchApp(any(), any())).thenReturn(mock(MchApp.class));\n        MchNotifyRecord mchNotifyRecord = mock(MchNotifyRecord.class);\n        when(mchNotifyRecordService.findByRefundOrder(any())).thenReturn(mchNotifyRecord);\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mchNotifyRecordService, times(1)).findByRefundOrder(any());\n        verify(mqSender, never()).send(any());\n    }\n}\n","import static org.mockito.Mockito.*;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.jeequan.jeepay.components.mq.model.PayOrderMchNotifyMQ;\nimport com.jeequan.jeepay.components.mq.vender.IMQSender;\nimport com.jeequan.jeepay.core.entity.MchNotifyRecord;\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.service.ConfigContextQueryService;\nimport com.jeequan.jeepay.pay.service.PayMchNotifyService;\nimport com.jeequan.jeepay.service.impl.MchNotifyRecordService;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class PayMchNotifyServiceTest {\n\n    @InjectMocks private PayMchNotifyService payMchNotifyService;\n\n    @Mock private MchNotifyRecordService mchNotifyRecordService;\n\n    @Mock private ConfigContextQueryService configContextQueryService;\n\n    @Mock private IMQSender mqSender;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testRefundOrderNotify_正常() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://www.notifyurl.com\");\n        refundOrder.setRefundOrderId(\"100001\");\n        refundOrder.setMchNo(\"mch10001\");\n        refundOrder.setAppId(\"app1001\");\n        refundOrder.setMchRefundNo(\"mchRefundOrder10001\");\n\n        when(configContextQueryService.queryMchApp(anyString(), anyString()))\n                .thenReturn(JSONObject.parseObject(\"{app_secret:\\\"123456\\\"}\", MchApp.class));\n        when(mchNotifyRecordService.findByRefundOrder(anyString())).thenReturn(null);\n        payMchNotifyService.refundOrderNotify(refundOrder);\n        verify(mchNotifyRecordService, times(1)).save(any(MchNotifyRecord.class));\n        verify(mqSender, times(1)).send(any(PayOrderMchNotifyMQ.class));\n    }\n\n    @Test\n    public void testRefundOrderNotify_通知地址为空() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"\");\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n        verify(mchNotifyRecordService, times(0)).save(any(MchNotifyRecord.class));\n        verify(mqSender, times(0)).send(any(PayOrderMchNotifyMQ.class));\n    }\n\n    @Test\n    public void testRefundOrderNotify_已存在通知记录() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://www.notifyurl.com\");\n        refundOrder.setRefundOrderId(\"100001\");\n        refundOrder.setMchNo(\"mch10001\");\n        refundOrder.setAppId(\"app1001\");\n        refundOrder.setMchRefundNo(\"mchRefundOrder10001\");\n\n        MchNotifyRecord mchNotifyRecord = new MchNotifyRecord();\n        when(configContextQueryService.queryMchApp(anyString(), anyString()))\n                .thenReturn(JSONObject.parseObject(\"{app_secret:\\\"123456\\\"}\", MchApp.class));\n        when(mchNotifyRecordService.findByRefundOrder(anyString())).thenReturn(mchNotifyRecord);\n        payMchNotifyService.refundOrderNotify(refundOrder);\n        verify(mchNotifyRecordService, times(0)).save(any(MchNotifyRecord.class));\n        verify(mqSender, times(0)).send(any(PayOrderMchNotifyMQ.class));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#16": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.PayMchNotifyService;\nimport com.jeequan.jeepay.service.impl.RefundOrderService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RefundOrderProcessServiceTest {\n\n    @Mock private RefundOrderService refundOrderService;\n\n    @Mock private PayMchNotifyService payMchNotifyService;\n\n    @InjectMocks private RefundOrderProcessService refundOrderProcessService;\n\n    @Test\n    public void testHandleRefundOrder4Channel_CONFIRM_SUCCESS() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n        refundOrder.setRefundOrderId(\"refund_order_123\");\n\n        Mockito.when(refundOrderService.updateIng2Success(\"refund_order_123\", \"channel_order_123\"))\n                .thenReturn(true);\n\n        ChannelRetMsg channelRetMsg = ChannelRetMsg.confirmSuccess(\"channel_order_123\");\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        Assert.assertTrue(result);\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Success(\"refund_order_123\", \"channel_order_123\");\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n\n    @Test\n    public void testHandleRefundOrder4Channel_CONFIRM_FAIL() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n        refundOrder.setRefundOrderId(\"refund_order_123\");\n\n        Mockito.when(refundOrderService.updateIng2Fail(\n                        \"refund_order_123\", \"channel_order_123\", \"channel_err_code\", \"channel_err_msg\"))\n                .thenReturn(true);\n\n        ChannelRetMsg channelRetMsg =\n                ChannelRetMsg.confirmFail(\"channel_order_123\", \"channel_err_code\", \"channel_err_msg\");\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        Assert.assertTrue(result);\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Fail(\n                        \"refund_order_123\", \"channel_order_123\", \"channel_err_code\", \"channel_err_msg\");\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n}","import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.PayMchNotifyService;\nimport com.jeequan.jeepay.service.impl.RefundOrderService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RefundOrderProcessServiceTest {\n\n    @Mock private RefundOrderService refundOrderService;\n\n    @Mock private PayMchNotifyService payMchNotifyService;\n\n    @InjectMocks private RefundOrderProcessService refundOrderProcessService;\n\n    @Test\n    public void testHandleRefundOrder4Channel_CONFIRM_SUCCESS() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n        refundOrder.setRefundOrderId(\"refund_order_123\");\n\n        Mockito.when(refundOrderService.updateIng2Success(\"refund_order_123\", \"channel_order_123\"))\n                .thenReturn(true);\n\n        ChannelRetMsg channelRetMsg = ChannelRetMsg.confirmSuccess(\"channel_order_123\");\n        boolean ret = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        Assert.assertTrue(ret);\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Success(\"refund_order_123\", \"channel_order_123\");\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n\n    @Test\n    public void testHandleRefundOrder4Channel_CONFIRM_FAIL() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n        refundOrder.setRefundOrderId(\"refund_order_123\");\n\n        Mockito.when(\n                        refundOrderService.updateIng2Fail(\n                                \"refund_order_123\",\n                                \"channel_order_123\",\n                                \"channel_err_code_123\",\n                                \"channel_err_msg_123\"))\n                .thenReturn(true);\n\n        ChannelRetMsg channelRetMsg =\n                ChannelRetMsg.confirmFail(\"channel_order_123\", \"channel_err_code_123\", \"channel_err_msg_123\");\n        boolean ret = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        Assert.assertTrue(ret);\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Fail(\n                        \"refund_order_123\",\n                        \"channel_order_123\",\n                        \"channel_err_code_123\",\n                        \"channel_err_msg_123\");\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n}","import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.PayMchNotifyService;\nimport com.jeequan.jeepay.service.impl.RefundOrderService;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RefundOrderProcessServiceTest {\n\n    @Mock private RefundOrderService refundOrderService;\n\n    @Mock private PayMchNotifyService payMchNotifyService;\n\n    @InjectMocks private RefundOrderProcessService refundOrderProcessService;\n\n    @Test\n    public void testHandleRefundOrder4Channel_confirmSuccess() {\n        Mockito.when(refundOrderService.updateIng2Success(Mockito.anyString(), Mockito.anyString())).thenReturn(true);\n\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"refundOrderId\");\n        refundOrder.setNotifyUrl(\"http://notifyUrl\");\n\n        ChannelRetMsg channelRetMsg = ChannelRetMsg.confirmSuccess(\"channelOrderId\");\n\n        Assert.assertTrue(refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder));\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Success(Mockito.anyString(), Mockito.anyString());\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n\n    @Test\n    public void testHandleRefundOrder4Channel_confirmFail() {\n        Mockito.when(refundOrderService.updateIng2Fail(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))\n                .thenReturn(true);\n\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"refundOrderId\");\n        refundOrder.setNotifyUrl(\"http://notifyUrl\");\n\n        ChannelRetMsg channelRetMsg = ChannelRetMsg.confirmFail(\"channelErrCode\", \"channelErrMsg\");\n\n        Assert.assertTrue(refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder));\n\n        Mockito.verify(refundOrderService, Mockito.times(1))\n                .updateIng2Fail(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n        Mockito.verify(payMchNotifyService, Mockito.times(1)).refundOrderNotify(refundOrder);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#17": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.PayOrderDivisionRecord;\nimport com.jeequan.jeepay.service.mapper.PayOrderDivisionRecordMapper;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PayOrderDivisionRecordServiceTest {\n\n    @InjectMocks private PayOrderDivisionRecordService payOrderDivisionRecordService;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @Before\n    public void setUp() {\n        Mockito.when(payOrderDivisionRecordMapper.update(\n                        Mockito.any(PayOrderDivisionRecord.class),\n                        Mockito.any(Wrapper.class)))\n                .thenReturn(1);\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail_Success() {\n        List<PayOrderDivisionRecord> records = new ArrayList<>();\n        PayOrderDivisionRecord r1 = new PayOrderDivisionRecord();\n        r1.setRecordId(1L);\n        records.add(r1);\n\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(\n                records, PayOrderDivisionRecord.STATE_SUCCESS, \"test_channel_batch_order_id\", \"{}\");\n\n        Mockito.verify(payOrderDivisionRecordMapper, Mockito.times(1))\n                .update(Mockito.any(PayOrderDivisionRecord.class), Mockito.any(Wrapper.class));\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail_EmptyList() {\n        List<PayOrderDivisionRecord> records = new ArrayList<>();\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(\n                records, PayOrderDivisionRecord.STATE_SUCCESS, \"test_channel_batch_order_id\", \"{}\");\n\n        Mockito.verify(payOrderDivisionRecordMapper, Mockito.times(0))\n                .update(Mockito.any(PayOrderDivisionRecord.class), Mockito.any(Wrapper.class));\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail_NullList() {\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(\n                null, PayOrderDivisionRecord.STATE_SUCCESS, \"test_channel_batch_order_id\", \"{}\");\n\n        Mockito.verify(payOrderDivisionRecordMapper, Mockito.times(0))\n                .update(Mockito.any(PayOrderDivisionRecord.class), Mockito.any(Wrapper.class));\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.mock;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;\nimport com.jeequan.jeepay.core.entity.PayOrderDivisionRecord;\nimport com.jeequan.jeepay.service.mapper.PayOrderDivisionRecordMapper;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PayOrderDivisionRecordServiceTest {\n\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @InjectMocks private PayOrderDivisionRecordService payOrderDivisionRecordService;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail() {\n        // mock update method\n        doAnswer(invocation -> {\n            LambdaUpdateWrapper<PayOrderDivisionRecord> updateWrapper = invocation.getArgument(1);\n            Assert.assertEquals(\"123\", updateWrapper.getSqlSegment().get(16));\n            Assert.assertEquals(Byte.valueOf((byte) 1), updateWrapper.getSqlSegment().get(17));\n            Assert.assertEquals(\"456\", updateWrapper.getSqlSegment().get(18));\n            return 1;\n        }).when(payOrderDivisionRecordMapper).update(any(), any());\n\n        // test\n        List<PayOrderDivisionRecord> records = new ArrayList<>();\n        records.add(new PayOrderDivisionRecord());\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, (byte) 1, \"123\", \"456\");\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail_EmptyList() {\n        // mock update method\n        doAnswer(invocation -> {\n            LambdaUpdateWrapper<PayOrderDivisionRecord> updateWrapper = invocation.getArgument(1);\n            Assert.assertEquals(0, updateWrapper.getSqlSegment().size());\n            return 0;\n        }).when(payOrderDivisionRecordMapper).update(any(), any());\n\n        // test\n        List<PayOrderDivisionRecord> records = new ArrayList<>();\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, (byte) 1, \"123\", \"456\");\n    }\n}","package com.jeequan.jeepay.service.impl;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.times;\n\nimport com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;\nimport com.jeequan.jeepay.core.entity.PayOrderDivisionRecord;\nimport com.jeequan.jeepay.service.mapper.PayOrderDivisionRecordMapper;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PayOrderDivisionRecordServiceTest {\n\n    @InjectMocks private PayOrderDivisionRecordService payOrderDivisionRecordService;\n\n    @Mock private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @Mock private PayOrderMapper payOrderMapper;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testUpdateRecordSuccessOrFail_正常() {\n        List<PayOrderDivisionRecord> records = new ArrayList<>();\n        records.add(getRecord());\n        doAnswer(invocation -> {\n            UpdateWrapper<PayOrderDivisionRecord> updateWrapper = (UpdateWrapper<PayOrderDivisionRecord>) invocation.getArguments()[1];\n            Assert.assertEquals(\"t_pay_order_division_record\", updateWrapper.getSqlSet().get(\"table_name\"));\n            Assert.assertEquals(\"batch_order_id\", updateWrapper.getSqlSet().get(\"batch_order_id\"));\n            Assert.assertEquals(\"channel_resp_result\", updateWrapper.getSqlSet().get(\"channel_resp_result\"));\n            Assert.assertEquals(PayOrderDivisionRecord.STATE_SUCCESS, updateWrapper.getSqlSet().get(\"state\"));\n            Assert.assertEquals(\n                    \"{\\\"record_id\\\":[123],\\\"state\\\":1,\\\"channel_batch_order_id\\\":\\\"channel_batch_order_id\\\",\\\"channel_resp_result\\\":\\\"channel_resp_result\\\"}\",\n                    updateWrapper.getSqlSet().get(\"json_data\"));\n            return null;\n        })\n                .when(payOrderDivisionRecordMapper)\n                .update(any(PayOrderDivisionRecord.class), any(UpdateWrapper.class));\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, PayOrderDivisionRecord.STATE_SUCCESS, \"channel_batch_order_id\", \"channel_resp_result\");\n\n        Assert.assertEquals(1, records.size());\n        Assert.assertEquals(PayOrderDivisionRecord.STATE_SUCCESS, records.get(0).getState());\n        Assert.assertEquals(\"channel_batch_order_id\", records.get(0).getChannelBatchOrderId());\n        Assert.assertEquals(\"channel_resp_result\", records.get(0).getChannelRespResult());\n    }\n\n    private PayOrderDivisionRecord getRecord() {\n        PayOrderDivisionRecord record = new PayOrderDivisionRecord();\n        record.setRecordId(123L);\n        return record;\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#18": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.*;\n\nimport com.jeequan.jeepay.core.exception.BizException;\nimport org.junit.Test;\n\npublic class JeepayKitTest {\n\n    @Test\n    public void testGetPayWayCodeByBarCode_WX_BAR() {\n        assertEquals(CS.PAY_WAY_CODE.WX_BAR, JeepayKit.getPayWayCodeByBarCode(\"1000000000000000000\"));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_ALI_BAR() {\n        assertEquals(CS.PAY_WAY_CODE.ALI_BAR, JeepayKit.getPayWayCodeByBarCode(\"283940000000000000\"));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_YSF_BAR() {\n        assertEquals(CS.PAY_WAY_CODE.YSF_BAR, JeepayKit.getPayWayCodeByBarCode(\"62000000000000000000\"));\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_INVALID_BAR_CODE_LENGTH() {\n        JeepayKit.getPayWayCodeByBarCode(\"123\"); // 长度不正确\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_INVALID_BAR_CODE_FORMAT() {\n        JeepayKit.getPayWayCodeByBarCode(\"123456789012345678901\"); // 格式不正确\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_EMPTY_BAR_CODE() {\n        JeepayKit.getPayWayCodeByBarCode(\"\"); // 条码为空\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_NULL_BAR_CODE() {\n        JeepayKit.getPayWayCodeByBarCode(null); // 条码为null\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_UNSUPPORTED_BAR_CODE() {\n        JeepayKit.getPayWayCodeByBarCode(\"5000000000000000000\"); // 不支持的条码类型\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.*;\n\nimport com.jeequan.jeepay.core.exception.BizException;\nimport org.junit.Test;\n\npublic class JeepayKitTest {\n\n    @Test\n    public void testGetPayWayCodeByBarCode_WX() {\n        String barCode = \"1000000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.WX_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_ALI() {\n        String barCode = \"2800000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.ALI_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_YSF() {\n        String barCode = \"6200000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.YSF_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_invalidLength() {\n        String barCode = \"123\"; // Invalid length for WX\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_invalidPrefix_WX() {\n        String barCode = \"1300000000000000000\"; // Invalid prefix for WX\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_invalidPrefix_ALI() {\n        String barCode = \"2700000000000000000\"; // Invalid prefix for ALI\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_invalidPrefix_YSF() {\n        String barCode = \"5200000000000000000\"; // Invalid prefix for YSF\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_empty() {\n        String barCode = \"\";\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_null() {\n        String barCode = null;\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_unsupported() {\n        String barCode = \"1234567890123456789\"; // Any 18-24 length string\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n}","package com.jeequan.jeepay.core.utils;\n\nimport static org.junit.Assert.*;\n\nimport com.jeequan.jeepay.core.exception.BizException;\nimport org.junit.Test;\n\npublic class JeepayKitTest {\n\n    @Test\n    public void testGetPayWayCodeByBarCode_WX() {\n        String barCode = \"1000000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.WX_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_ALI() {\n        String barCode = \"2800000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.ALI_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test\n    public void testGetPayWayCodeByBarCode_YSF() {\n        String barCode = \"6200000000000000000\";\n        assertEquals(CS.PAY_WAY_CODE.YSF_BAR, JeepayKit.getPayWayCodeByBarCode(barCode));\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_InvalidLength() {\n        String barCode = \"1\";\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_InvalidPrefix() {\n        String barCode = \"10000000000000000000\";\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_Empty() {\n        String barCode = \"\";\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_Null() {\n        String barCode = null;\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n\n    @Test(expected = BizException.class)\n    public void testGetPayWayCodeByBarCode_Unsupported() {\n        String barCode = \"3000000000000000000\";\n        JeepayKit.getPayWayCodeByBarCode(barCode);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#19": {
    "ut_code": ["package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.MchAppService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.Spy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConfigContextServiceTest {\n\n    @Spy private MchInfoService mchInfoService;\n\n    @Spy private MchAppService mchAppService;\n\n    @Spy private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Spy private ConfigContextService configContextService;\n\n    private final String mchNo = \"testMch\";\n    private final String appId = \"testApp\";\n    private final String isvNo = \"testIsv\";\n\n    @Test\n    public void testInitMchInfoConfigContext() {\n        // mock\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(null);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        List<MchApp> mchApps = new ArrayList<>();\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        mchApp.setMchNo(mchNo);\n        mchApps.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchApps);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n    }\n\n    @Test\n    public void testInitMchInfoConfigContext2() {\n        // mock\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(null);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        List<MchApp> mchApps = new ArrayList<>();\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        mchApp.setMchNo(mchNo);\n        mchApps.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchApps);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n\n        // repeat\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n    }\n\n    @Test\n    public void testInitMchInfoConfigContext3() {\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        List<MchApp> mchApps = new ArrayList<>();\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        mchApp.setMchNo(mchNo);\n        mchApps.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchApps);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(null);\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n    }\n\n    @Test\n    public void testInitMchInfoConfigContext4() {\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        List<MchApp> mchApps = new ArrayList<>();\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        mchApp.setMchNo(mchNo);\n        mchApps.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchApps);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(new MchInfo());\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(0, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n    }\n\n    @Test\n    public void testInitMchInfoConfigContext5() {\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        List<MchApp> mchApps = new ArrayList<>();\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        mchApp.setMchNo(mchNo);\n        mchApps.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchApps);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(null);\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertEquals(1, configContextService.getMchInfoConfigContext(mchNo).getAppMap().size());\n    }\n\n    private void initMock() {\n        MockitoAnnotations.initMocks(this);\n        Mockito.reset(mchInfoService);\n        Mockito.reset(mchAppService);\n        Mockito.reset(payInterfaceConfigService);\n        Mockito.reset(configContextService);","package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.MchAppService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.Spy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConfigContextServiceTest {\n\n    @Spy private MchInfoService mchInfoService;\n\n    @Spy private MchAppService mchAppService;\n\n    @Spy private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Spy private ConfigContextService configContextService;\n\n    private final String mchNo = \"testMch\";\n    private final String appId = \"testApp\";\n    private final String isvNo = \"testIsv\";\n\n    @Test\n    public void testInitMchInfoConfigContext() {\n        // mockmchInfoService\n        Mockito.when(mchInfoService.getById(mchNo)).thenReturn(null); // 查询不到商户主体\n        Mockito.when(mchInfoService.getById(mchNo + \"1\")).thenReturn(new MchInfo()); // 查询不到商户主体\n\n        // mockmchAppService\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(appId);\n        List<MchApp> mchAppList = new ArrayList<>();\n        mchAppList.add(mchApp);\n        Mockito.when(mchAppService.list(Mockito.any())).thenReturn(mchAppList);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n\n        configContextService.initMchInfoConfigContext(mchNo + \"1\");\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo + \"1\"));\n\n        Mockito.verify(mchInfoService, Mockito.times(1)).getById(mchNo);\n        Mockito.verify(mchInfoService, Mockito.times(1)).getById(mchNo + \"1\");\n        Mockito.verify(mchAppService, Mockito.times(1)).list(Mockito.any());\n    }\n\n    private void initMock() {\n        MockitoAnnotations.initMocks(this);\n        Mockito.reset(\n                mchInfoService,\n                mchAppService,\n                payInterfaceConfigService,\n                configContextService);\n    }\n}\n","package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.service.impl.MchAppService;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.Spy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConfigContextServiceTest {\n\n    @Spy private ConfigContextService configContextService;\n\n    @Spy private MchInfoService mchInfoService;\n\n    @Spy private MchAppService mchAppService;\n\n    @Spy private PayInterfaceConfigService payInterfaceConfigService;\n\n    private String mchNo = \"test_mch\";\n\n    @Test\n    public void testInitMchInfoConfigContext() {\n        MockitoAnnotations.initMocks(this);\n\n        // mock mchInfo\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        mchInfo.setType(CS.MCH_TYPE_ALI);\n\n        // mock mchApp\n        MchApp mchApp = new MchApp();\n        mchApp.setAppId(mchNo + \"_app\");\n        mchApp.setMchNo(mchNo);\n        List<MchApp> mchAppList = new ArrayList<>();\n        mchAppList.add(mchApp);\n\n        // mock mchAppService\n        Mockito.doReturn(mchAppList).when(mchAppService).list(Mockito.any());\n\n        // 调用初始化方法\n        configContextService.initMchInfoConfigContext(mchNo);\n\n        // 验证结果\n        Assert.assertNotNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertNotNull(configContextService.getMchAppConfigContext(mchNo, mchNo + \"_app\"));\n\n        // 模拟商户删除操作\n        Mockito.doReturn(null).when(mchInfoService).getById(Mockito.any());\n        configContextService.initMchInfoConfigContext(mchNo);\n        Assert.assertNull(configContextService.getMchInfoConfigContext(mchNo));\n        Assert.assertNull(configContextService.getMchAppConfigContext(mchNo, mchNo + \"_app\"));\n    }\n}"]
  }
}