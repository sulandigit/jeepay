{
  "java_ut_eval_case#jeepay#0": {
    "ut_code": ["public class RefundOrderServiceTest {\n\n    @Autowired\n    private RefundOrderService refundOrderService;\n\n    @Test\n    public void testUpdateIng2SuccessOrFail() {\n        // Prepare test data\n        String refundOrderId = \"123456\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"789012\";\n        String channelErrCode = \"ABC123\";\n        String channelErrMsg = \"Error message\";\n\n        // Execute the method to be tested\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        // Assert the result\n        assertTrue(result);\n        // Add additional assertions if necessary\n    }\n\n    // Add more test methods for other scenarios\n}\n","public class RefundOrderServiceTest {\n\n    @Autowired\n    private RefundOrderService refundOrderService;\n\n    @Test\n    public void testUpdateIng2SuccessOrFail() {\n        // Prepare test data\n        String refundOrderId = \"123456\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"789012\";\n        String channelErrCode = \"ABC123\";\n        String channelErrMsg = \"Error message\";\n\n        // Execute the method to be tested\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        // Assert the result\n        assertTrue(result);\n        // Add additional assertions if necessary\n    }\n\n    // Add more test methods for other scenarios\n}\n","public class RefundOrderServiceTest {\n\n    @Autowired\n    private RefundOrderService refundOrderService;\n\n    @Test\n    public void testUpdateIng2SuccessOrFail() {\n        // Prepare test data\n        String refundOrderId = \"123456\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"789012\";\n        String channelErrCode = \"ABC123\";\n        String channelErrMsg = \"Error message\";\n\n        // Execute the method to be tested\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        // Assert the result\n        assertTrue(result);\n        // Add additional assertions if necessary\n    }\n\n    // Add more test methods for other scenarios\n}\n"]
  },
  "java_ut_eval_case#jeepay#1": {
    "ut_code": ["package com.jeequan.jeepay.mgr.service;\n\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.mockito.Mockito.*;\n\n// 使用MockitoExtension\n@ExtendWith(MockitoExtension.class)\npublic class AuthServiceTest {\n\n    @InjectMocks // 将被测试的类注入到Mockito中\n    private AuthService authService;\n\n    @Mock\n    private RedisUtil redisUtil; // 模拟RedisUtil\n\n    // 在每个测试用例执行前执行的初始化方法\n    @BeforeEach\n    public void setUp() {\n        // Mock RedisUtil相关方法\n        when(RedisUtil.keys(anyString())).thenReturn(Collections.emptyList());\n        doNothing().when(RedisUtil.class);\n        RedisUtil.del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入空列表时应该什么也不做\n    @Test\n    public void testDelAuthenticationWithEmptyList() {\n        authService.delAuthentication(Collections.emptyList());\n        // 验证RedisUtil的keys和del方法没有被调用\n        verify(redisUtil, never()).keys(anyString());\n        verify(redisUtil, never()).del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入非空列表时应该正确删除缓存\n    @Test\n    public void testDelAuthenticationWithNonEmptyList() {\n        List<Long> sysUserIdList = Arrays.asList(1L, 2L, 3L);\n        // 调用待测试的方法\n        authService.delAuthentication(sysUserIdList);\n\n        // 验证RedisUtil的keys和del方法被正确调用\n        for (Long sysUserId : sysUserIdList) {\n            String cacheKeyPattern = CS.getCacheKeyToken(sysUserId, \"*\");\n            verify(redisUtil).keys(cacheKeyPattern);\n            verify(redisUtil, atLeastOnce()).del(anyString());\n        }\n    }\n\n}\n","package com.jeequan.jeepay.mgr.service;\n\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.mockito.Mockito.*;\n\n// 使用MockitoExtension\n@ExtendWith(MockitoExtension.class)\npublic class AuthServiceTest {\n\n    @InjectMocks // 将被测试的类注入到Mockito中\n    private AuthService authService;\n\n    @Mock\n    private RedisUtil redisUtil; // 模拟RedisUtil\n\n    // 在每个测试用例执行前执行的初始化方法\n    @BeforeEach\n    public void setUp() {\n        // Mock RedisUtil相关方法\n        when(RedisUtil.keys(anyString())).thenReturn(Collections.emptyList());\n        doNothing().when(RedisUtil.class);\n        RedisUtil.del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入空列表时应该什么也不做\n    @Test\n    public void testDelAuthenticationWithEmptyList() {\n        authService.delAuthentication(Collections.emptyList());\n        // 验证RedisUtil的keys和del方法没有被调用\n        verify(redisUtil, never()).keys(anyString());\n        verify(redisUtil, never()).del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入非空列表时应该正确删除缓存\n    @Test\n    public void testDelAuthenticationWithNonEmptyList() {\n        List<Long> sysUserIdList = Arrays.asList(1L, 2L, 3L);\n        // 调用待测试的方法\n        authService.delAuthentication(sysUserIdList);\n\n        // 验证RedisUtil的keys和del方法被正确调用\n        for (Long sysUserId : sysUserIdList) {\n            String cacheKeyPattern = CS.getCacheKeyToken(sysUserId, \"*\");\n            verify(redisUtil).keys(cacheKeyPattern);\n            verify(redisUtil, atLeastOnce()).del(anyString());\n        }\n    }\n\n}\n","package com.jeequan.jeepay.mgr.service;\n\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.cache.RedisUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.mockito.Mockito.*;\n\n// 使用MockitoExtension\n@ExtendWith(MockitoExtension.class)\npublic class AuthServiceTest {\n\n    @InjectMocks // 将被测试的类注入到Mockito中\n    private AuthService authService;\n\n    @Mock\n    private RedisUtil redisUtil; // 模拟RedisUtil\n\n    // 在每个测试用例执行前执行的初始化方法\n    @BeforeEach\n    public void setUp() {\n        // Mock RedisUtil相关方法\n        when(RedisUtil.keys(anyString())).thenReturn(Collections.emptyList());\n        doNothing().when(RedisUtil.class);\n        RedisUtil.del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入空列表时应该什么也不做\n    @Test\n    public void testDelAuthenticationWithEmptyList() {\n        authService.delAuthentication(Collections.emptyList());\n        // 验证RedisUtil的keys和del方法没有被调用\n        verify(redisUtil, never()).keys(anyString());\n        verify(redisUtil, never()).del(anyString());\n    }\n\n    // 测试delAuthentication方法，当传入非空列表时应该正确删除缓存\n    @Test\n    public void testDelAuthenticationWithNonEmptyList() {\n        List<Long> sysUserIdList = Arrays.asList(1L, 2L, 3L);\n        // 调用待测试的方法\n        authService.delAuthentication(sysUserIdList);\n\n        // 验证RedisUtil的keys和del方法被正确调用\n        for (Long sysUserId : sysUserIdList) {\n            String cacheKeyPattern = CS.getCacheKeyToken(sysUserId, \"*\");\n            verify(redisUtil).keys(cacheKeyPattern);\n            verify(redisUtil, atLeastOnce()).del(anyString());\n        }\n    }\n\n}\n"]
  },
  "java_ut_eval_case#jeepay#2": {
    "ut_code": ["package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ChannelOrderReissueServiceTest {\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock\n    private IRefundService mockRefundService;\n\n    @Mock\n    private ConfigContextQueryService mockConfigContextQueryService;\n\n    @Mock\n    private RefundOrderProcessService mockRefundOrderProcessService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testProcessRefundOrder() {\n        // Arrange\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"refund123\");\n        refundOrder.setMchNo(\"mch123\");\n        refundOrder.setAppId(\"app123\");\n        refundOrder.setIfCode(\"ALIPAY\");\n\n        MchAppConfigContext mockMchAppConfigContext = new MchAppConfigContext();\n\n        ChannelRetMsg mockChannelRetMsg = new ChannelRetMsg();\n        mockChannelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n        mockChannelRetMsg.setChannelOrderId(\"channelRefund123\");\n\n        when(mockConfigContextQueryService.queryMchInfoAndAppInfo(refundOrder.getMchNo(), refundOrder.getAppId())).thenReturn(mockMchAppConfigContext);\n        when(mockRefundService.query(any(), any())).thenReturn(mockChannelRetMsg);\n\n        // Act\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS, result.getChannelState());\n        verify(mockRefundService, times(1)).query(refundOrder, mockMchAppConfigContext);\n        verify(mockRefundOrderProcessService, times(1)).handleRefundOrder4Channel(mockChannelRetMsg, refundOrder);\n    }\n\n    // Add more test cases for different scenarios...\n}\n","package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ChannelOrderReissueServiceTest {\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock\n    private IRefundService mockRefundService;\n\n    @Mock\n    private ConfigContextQueryService mockConfigContextQueryService;\n\n    @Mock\n    private RefundOrderProcessService mockRefundOrderProcessService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testProcessRefundOrder() {\n        // Arrange\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"refund123\");\n        refundOrder.setMchNo(\"mch123\");\n        refundOrder.setAppId(\"app123\");\n        refundOrder.setIfCode(\"ALIPAY\");\n\n        ChannelRetMsg mockChannelRetMsg = new ChannelRetMsg();\n        mockChannelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n\n        when(mockConfigContextQueryService.queryMchInfoAndAppInfo(refundOrder.getMchNo(), refundOrder.getAppId())).thenReturn(new MchAppConfigContext());\n        when(mockRefundService.query(any(), any(MchAppConfigContext.class))).thenReturn(mockChannelRetMsg);\n        doNothing().when(mockRefundOrderProcessService).handleRefundOrder4Channel(any(ChannelRetMsg.class), any(RefundOrder.class));\n\n        // Act\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS, result.getChannelState());\n        verify(mockRefundService, times(1)).query(refundOrder, new MchAppConfigContext());\n        verify(mockRefundOrderProcessService, times(1)).handleRefundOrder4Channel(mockChannelRetMsg, refundOrder);\n    }\n\n    // Add more test cases for different scenarios...\n}\n","package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.channel.IRefundService;\nimport com.jeequan.jeepay.pay.model.MchAppConfigContext;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ChannelOrderReissueServiceTest {\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock\n    private IRefundService mockRefundService;\n\n    @Mock\n    private ConfigContextQueryService mockConfigContextQueryService;\n\n    @Mock\n    private RefundOrderProcessService mockRefundOrderProcessService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testProcessRefundOrder() {\n        // Arrange\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"refund123\");\n        refundOrder.setMchNo(\"mch123\");\n        refundOrder.setAppId(\"app123\");\n        refundOrder.setIfCode(\"ALIPAY\");\n\n        MchAppConfigContext mockMchAppConfigContext = new MchAppConfigContext();\n\n        ChannelRetMsg mockChannelRetMsg = new ChannelRetMsg();\n        mockChannelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n\n        when(mockConfigContextQueryService.queryMchInfoAndAppInfo(refundOrder.getMchNo(), refundOrder.getAppId())).thenReturn(mockMchAppConfigContext);\n        when(mockRefundService.query(any(), any())).thenReturn(mockChannelRetMsg);\n\n        // Act\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS, result.getChannelState());\n        verify(mockRefundService, times(1)).query(refundOrder, mockMchAppConfigContext);\n        verify(mockRefundOrderProcessService, times(1)).handleRefundOrder4Channel(mockChannelRetMsg, refundOrder);\n    }\n\n    // Add more test cases for different scenarios...\n}\n"]
  },
  "java_ut_eval_case#jeepay#3": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        // Arrange\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"configKey1\", \"configValue1\");\n        updateMap.put(\"configKey2\", \"configValue2\");\n\n        // Mock saveOrUpdate behavior\n        given(sysConfigMapper.saveOrUpdate(any(SysConfig.class))).willReturn(true);\n\n        // Act\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        // Assert\n        assertEquals(2, result); // Expecting 2 updates as there are 2 entries in the updateMap\n        verify(sysConfigMapper, times(2)).saveOrUpdate(any(SysConfig.class));\n    }\n\n    // You can add more test cases to cover different scenarios, such as an empty updateMap, \n    // updateMap with duplicate keys, or handling when saveOrUpdate returns false.\n}\n","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        // Arrange\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"configKey1\", \"configValue1\");\n        updateMap.put(\"configKey2\", \"configValue2\");\n\n        // Mock saveOrUpdate behavior\n        given(sysConfigMapper.saveOrUpdate(any(SysConfig.class))).willReturn(true);\n\n        // Act\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        // Assert\n        assertEquals(2, result); // Expecting 2 updates as there are 2 entries in the updateMap\n        verify(sysConfigMapper, times(2)).saveOrUpdate(any(SysConfig.class));\n    }\n\n    // You can add more test cases to cover different scenarios, such as an empty updateMap, \n    // updateMap with duplicate keys, or handling when saveOrUpdate returns false.\n}\n","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.SysConfig;\nimport com.jeequan.jeepay.service.mapper.SysConfigMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SysConfigServiceTest {\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateByConfigKey() {\n        // Arrange\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"configKey1\", \"configValue1\");\n        updateMap.put(\"configKey2\", \"configValue2\");\n\n        // Mock saveOrUpdate behavior\n        given(sysConfigMapper.saveOrUpdate(any(SysConfig.class))).willReturn(true);\n\n        // Act\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        // Assert\n        assertEquals(2, result); // Expecting 2 updates as there are 2 entries in the updateMap\n        verify(sysConfigMapper, times(2)).saveOrUpdate(any(SysConfig.class));\n    }\n\n    // You can add more test cases to cover different scenarios, such as an empty updateMap, \n    // updateMap with duplicate keys, or handling when saveOrUpdate returns false.\n}\n"]
  },
  "java_ut_eval_case#jeepay#4": {
    "ut_code": ["package com.jeequan.jeepay.core.beans;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @Mock\n    private HttpServletRequest request;\n\n    private RequestKitBean requestKitBean;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        requestKitBean = new RequestKitBean();\n\n        // 使用Mockito模拟HttpServletRequest对象\n        MockHttpServletRequest mockRequest = new MockHttpServletRequest();\n        // 设置想要模拟的请求头信息\n        mockRequest.setRemoteAddr(\"192.168.0.1\");\n        mockRequest.setHeader(\"x-forwarded-for\", \"192.168.0.2, 192.168.0.3\");\n        mockRequest.setHeader(\"Proxy-Client-IP\", \"192.168.0.4\");\n        mockRequest.setHeader(\"WL-Proxy-Client-IP\", \"192.168.0.5\");\n\n        // 通过反射将MockHttpServletRequest对象注入到RequestKitBean中\n        ReflectionTestUtils.setField(requestKitBean, \"request\", mockRequest);\n    }\n\n    @Test\n    public void testGetClientIp() {\n        // 测试获取客户端IP地址的方法\n        String clientIp = requestKitBean.getClientIp();\n        assertEquals(\"192.168.0.2\", clientIp, \"The client IP address should be the first IP in the 'x-forwarded-for' header.\");\n    }\n\n}\n","package com.jeequan.jeepay.core.beans;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @Mock\n    private HttpServletRequest request;\n\n    private RequestKitBean requestKitBean;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        requestKitBean = new RequestKitBean();\n\n        // 使用Mockito模拟HttpServletRequest对象\n        MockHttpServletRequest mockRequest = new MockHttpServletRequest();\n        // 设置想要模拟的请求头信息\n        mockRequest.setRemoteAddr(\"192.168.0.1\");\n        mockRequest.setHeader(\"x-forwarded-for\", \"192.168.0.2, 192.168.0.3\");\n        mockRequest.setHeader(\"Proxy-Client-IP\", \"192.168.0.4\");\n        mockRequest.setHeader(\"WL-Proxy-Client-IP\", \"192.168.0.5\");\n\n        // 通过反射将MockHttpServletRequest对象注入到RequestKitBean中\n        ReflectionTestUtils.setField(requestKitBean, \"request\", mockRequest);\n    }\n\n    @Test\n    public void testGetClientIp() {\n        // 测试获取客户端IP地址的方法\n        String clientIp = requestKitBean.getClientIp();\n        assertEquals(\"192.168.0.2\", clientIp, \"The client IP address should be the first IP in the 'x-forwarded-for' header.\");\n    }\n\n}\n","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @InjectMocks\n    private RequestKitBean requestKitBean;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderXForwardedForIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.1\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderProxyClientIpIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"192.168.1.2\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.2\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderWLProxyClientIpIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"192.168.1.3\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.3\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenRemoteAddrIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(null);\n        when(request.getRemoteAddr()).thenReturn(\"192.168.1.4\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.4\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsFirstIp_whenMultipleIpsAreSetInXForwardedFor() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.5,192.168.1.6\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.5\", clientIp);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#5": {
    "ut_code": ["@Test\npublic void testInit() {\n    // Set up the necessary beans and dependencies\n    RabbitMQConfig rabbitMQConfig = new RabbitMQConfig();\n    rabbitMQConfig.init();\n\n    // Assert that the expected beans are registered\n    // Assert Queue beans\n    Set<String> queueBeanNames = rabbitMQBeanProcessor.beanDefinitionRegistry.getBeanDefinitionNames();\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        assertTrue(queueBeanNames.contains(amq.getMQName()));\n    }\n\n    // Assert FanoutExchange beans for BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() == MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(FANOUT_EXCHANGE_NAME_PREFIX + amq.getMQName()));\n        }\n    }\n\n    // Assert Binding beans for non-BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() != MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(amq.getMQName() + \"_DelayedBind\"));\n        }\n    }\n}\n","@Test\npublic void testInit() {\n    // Set up the necessary beans and dependencies\n    RabbitMQConfig rabbitMQConfig = new RabbitMQConfig();\n    rabbitMQConfig.init();\n\n    // Assert that the expected beans are registered\n    // Assert Queue beans\n    Set<String> queueBeanNames = rabbitMQBeanProcessor.beanDefinitionRegistry.getBeanDefinitionNames();\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        assertTrue(queueBeanNames.contains(amq.getMQName()));\n    }\n\n    // Assert FanoutExchange beans for BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() == MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(FANOUT_EXCHANGE_NAME_PREFIX + amq.getMQName()));\n        }\n    }\n\n    // Assert Binding beans for non-BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() != MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(amq.getMQName() + \"_DelayedBind\"));\n        }\n    }\n}\n","@Test\npublic void testInit() {\n    // Set up the necessary beans and dependencies\n    RabbitMQConfig rabbitMQConfig = new RabbitMQConfig();\n    rabbitMQConfig.init();\n\n    // Assert that the expected beans are registered\n    // Assert Queue beans\n    Set<String> queueBeanNames = rabbitMQBeanProcessor.beanDefinitionRegistry.getBeanDefinitionNames();\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        assertTrue(queueBeanNames.contains(amq.getMQName()));\n    }\n\n    // Assert FanoutExchange beans for BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() == MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(FANOUT_EXCHANGE_NAME_PREFIX + amq.getMQName()));\n        }\n    }\n\n    // Assert Binding beans for non-BROADCAST type\n    for (Class<?> aClass : set) {\n        AbstractMQ amq = (AbstractMQ) ReflectUtil.newInstance(aClass);\n        if (amq.getMQType() != MQSendTypeEnum.BROADCAST) {\n            assertTrue(queueBeanNames.contains(amq.getMQName() + \"_DelayedBind\"));\n        }\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#6": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport java.util.*;\n\n// 测试类\npublic class PayOrderServiceTest {\n\n    @InjectMocks // 自动注入 Mock 对象\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper; // 模拟 PayOrderMapper\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this); // 初始化 Mock 对象\n    }\n\n    // 测试方法\n    @Test\n    public void testMainPagePayCount() {\n        // 准备测试数据和模拟行为\n        String mchNo = \"10000001\";\n        String createdStart = \"2023-04-01\";\n        String createdEnd = \"2023-04-07\";\n        \n        List<Map> mockPayOrderList = new ArrayList<>(); // 假设返回的支付订单统计列表\n        List<Map> mockRefundOrderList = new ArrayList<>(); // 假设返回的退款订单统计列表\n\n        when(payOrderMapper.selectOrderCount(anyMap())).thenReturn(mockPayOrderList, mockRefundOrderList);\n\n        // 执行测试方法\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        // 验证结果\n        assertNotNull(result);\n        // ... 这里可以添加更多的断言来验证返回的数据是否符合预期\n\n        // 验证是否调用了 PayOrderMapper 的 selectOrderCount 方法\n        verify(payOrderMapper, times(2)).selectOrderCount(anyMap()); // 因为有两次调用，一次查询支付记录，一次查询退款记录\n    }\n\n    // 可以添加更多测试用例来覆盖不同的场景，例如不传入 mchNo，或者传入的日期范围无效等\n}\n","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport java.util.*;\n\n// 测试类\npublic class PayOrderServiceTest {\n\n    @InjectMocks // 自动注入 Mock 对象\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper; // 模拟 PayOrderMapper\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this); // 初始化 Mock 对象\n    }\n\n    // 测试方法\n    @Test\n    public void testMainPagePayCount() {\n        // 准备测试数据和模拟行为\n        String mchNo = \"10000001\";\n        String createdStart = \"2023-04-01\";\n        String createdEnd = \"2023-04-07\";\n        \n        List<Map> mockPayOrderList = new ArrayList<>(); // 假设返回的支付订单统计列表\n        List<Map> mockRefundOrderList = new ArrayList<>(); // 假设返回的退款订单统计列表\n\n        when(payOrderMapper.selectOrderCount(anyMap())).thenReturn(mockPayOrderList, mockRefundOrderList);\n\n        // 执行测试方法\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        // 验证结果\n        assertNotNull(result);\n        // ... 这里可以添加更多的断言来验证返回的数据是否符合预期\n\n        // 验证是否调用了 PayOrderMapper 的 selectOrderCount 方法\n        verify(payOrderMapper, times(2)).selectOrderCount(anyMap()); // 因为有两次调用，一次查询支付记录，一次查询退款记录\n    }\n\n    // 可以添加更多测试用例来覆盖不同的场景，例如不传入 mchNo，或者传入的日期范围无效等\n}\n","package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.PayOrder;\nimport com.jeequan.jeepay.service.mapper.PayOrderMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport java.util.*;\n\n// 测试类\npublic class PayOrderServiceTest {\n\n    @InjectMocks // 自动注入 Mock 对象\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper; // 模拟 PayOrderMapper\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this); // 初始化 Mock 对象\n    }\n\n    // 测试方法\n    @Test\n    public void testMainPagePayCount() {\n        // 准备测试数据和模拟行为\n        String mchNo = \"10000001\";\n        String createdStart = \"2023-04-01\";\n        String createdEnd = \"2023-04-07\";\n        \n        List<Map> mockPayOrderList = new ArrayList<>(); // 假设返回的支付订单统计列表\n        List<Map> mockRefundOrderList = new ArrayList<>(); // 假设返回的退款订单统计列表\n\n        when(payOrderMapper.selectOrderCount(anyMap())).thenReturn(mockPayOrderList, mockRefundOrderList);\n\n        // 执行测试方法\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        // 验证结果\n        assertNotNull(result);\n        // ... 这里可以添加更多的断言来验证返回的数据是否符合预期\n\n        // 验证是否调用了 PayOrderMapper 的 selectOrderCount 方法\n        verify(payOrderMapper, times(2)).selectOrderCount(anyMap()); // 因为有两次调用，一次查询支付记录，一次查询退款记录\n    }\n\n    // 可以添加更多测试用例来覆盖不同的场景，例如不传入 mchNo，或者传入的日期范围无效等\n}\n"]
  },
  "java_ut_eval_case#jeepay#7": {
    "ut_code": ["import com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.anyString;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDeSenData() {\n        // Create a mock object of WxpayIsvParams\n        WxpayIsvParams isvParams = Mockito.spy(new WxpayIsvParams());\n\n        // Set the original values\n        isvParams.setAppSecret(\"appSecret123456\");\n        isvParams.setKey(\"key123456\");\n        isvParams.setApiV3Key(\"apiV3Key123456\");\n        isvParams.setSerialNo(\"serialNo123456\");\n\n        // Stub the StringUtils.isNotBlank method\n        Mockito.when(StringUtils.isNotBlank(anyString())).thenReturn(true);\n\n        // Stub the StringKit.str2Star method\n        Mockito.when(StringKit.str2Star(anyString(), anyInt(), anyInt(), anyInt())).thenAnswer(invocation -> {\n            String str = invocation.getArgument(0);\n            int start = invocation.getArgument(1);\n            int end = invocation.getArgument(2);\n            int length = invocation.getArgument(3);\n            return str.substring(0, start) + \"*\" + str.substring(end + length);\n        });\n\n        // Execute the deSenData method\n        String result = isvParams.deSenData();\n\n        // Verify the result\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assertions.assertEquals(\"appS****\", jsonObject.getString(\"appSecret\"));\n        Assertions.assertEquals(\"k****\", jsonObject.getString(\"key\"));\n        Assertions.assertEquals(\"a****\", jsonObject.getString(\"apiV3Key\"));\n        Assertions.assertEquals(\"s****\", jsonObject.getString(\"serialNo\"));\n    }\n}\n","import com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.anyString;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDeSenData() {\n        // Create a mock object of WxpayIsvParams\n        WxpayIsvParams isvParams = Mockito.spy(new WxpayIsvParams());\n\n        // Set the original values\n        isvParams.setAppSecret(\"appSecret123456\");\n        isvParams.setKey(\"key123456\");\n        isvParams.setApiV3Key(\"apiV3Key123456\");\n        isvParams.setSerialNo(\"serialNo123456\");\n\n        // Stub the StringUtils.isNotBlank method\n        Mockito.when(StringUtils.isNotBlank(anyString())).thenReturn(true);\n\n        // Stub the StringKit.str2Star method\n        Mockito.when(StringKit.str2Star(anyString(), anyInt(), anyInt(), anyInt())).thenAnswer(invocation -> {\n            String str = invocation.getArgument(0);\n            int start = invocation.getArgument(1);\n            int end = invocation.getArgument(2);\n            int length = invocation.getArgument(3);\n            return str.substring(0, start) + \"*\" + str.substring(end + length);\n        });\n\n        // Execute the deSenData method\n        String result = isvParams.deSenData();\n\n        // Verify the result\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assertions.assertEquals(\"appS****\", jsonObject.getString(\"appSecret\"));\n        Assertions.assertEquals(\"k****\", jsonObject.getString(\"key\"));\n        Assertions.assertEquals(\"a****\", jsonObject.getString(\"apiV3Key\"));\n        Assertions.assertEquals(\"s****\", jsonObject.getString(\"serialNo\"));\n    }\n}\n",""]
  },
  "java_ut_eval_case#jeepay#8": {
    "ut_code": ["public class IsvInfoServiceTest {\n    \n    @Autowired\n    private IsvInfoService isvInfoService;\n    \n    @Autowired\n    private MchInfoService mchInfoService;\n    \n    @Autowired\n    private PayInterfaceConfigService payInterfaceConfigService;\n    \n    @Test\n    public void testRemoveByIsvNo() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return true\n        when(isvInfoService.removeById(isvNo)).thenReturn(true);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // Verify that the payInterfaceConfigService.remove method is called with the correct parameters\n        verify(payInterfaceConfigService).remove(eq(isvNo), eq(CS.INFO_TYPE_ISV));\n        \n        // Verify that the isvInfoService.removeById method is called with the correct parameter\n        verify(isvInfoService).removeById(isvNo);\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoNotExist() {\n        // Setup\n        String isvNo = \"987654\";\n        \n        // Step 1: Mock the isvInfoService.getById method to return null\n        when(isvInfoService.getById(isvNo)).thenReturn(null);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo does not exist\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoWithMch() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return a non-zero value\n        when(mchInfoService.count(any())).thenReturn(1);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo has associated merchants\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoRemoveFail() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return false\n        when(isvInfoService.removeById(isvNo)).thenReturn(false);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the removal of the isvNo failed\n    }\n}\n","public class IsvInfoServiceTest {\n    \n    @Autowired\n    private IsvInfoService isvInfoService;\n    \n    @Autowired\n    private MchInfoService mchInfoService;\n    \n    @Autowired\n    private PayInterfaceConfigService payInterfaceConfigService;\n    \n    @Test\n    public void testRemoveByIsvNo() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return true\n        when(isvInfoService.removeById(isvNo)).thenReturn(true);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // Verify that the payInterfaceConfigService.remove method is called with the correct parameters\n        verify(payInterfaceConfigService).remove(eq(isvNo), eq(CS.INFO_TYPE_ISV));\n        \n        // Verify that the isvInfoService.removeById method is called with the correct parameter\n        verify(isvInfoService).removeById(isvNo);\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoNotExist() {\n        // Setup\n        String isvNo = \"987654\";\n        \n        // Step 1: Mock the isvInfoService.getById method to return null\n        when(isvInfoService.getById(isvNo)).thenReturn(null);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo does not exist\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoWithMch() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return a non-zero value\n        when(mchInfoService.count(any())).thenReturn(1);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo has associated merchants\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoRemoveFail() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return false\n        when(isvInfoService.removeById(isvNo)).thenReturn(false);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the removal of the isvNo failed\n    }\n}\n","public class IsvInfoServiceTest {\n    \n    @Autowired\n    private IsvInfoService isvInfoService;\n    \n    @Autowired\n    private MchInfoService mchInfoService;\n    \n    @Autowired\n    private PayInterfaceConfigService payInterfaceConfigService;\n    \n    @Test\n    public void testRemoveByIsvNo() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return true\n        when(isvInfoService.removeById(isvNo)).thenReturn(true);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // Verify that the payInterfaceConfigService.remove method is called with the correct parameters\n        verify(payInterfaceConfigService).remove(eq(isvNo), eq(CS.INFO_TYPE_ISV));\n        \n        // Verify that the isvInfoService.removeById method is called with the correct parameter\n        verify(isvInfoService).removeById(isvNo);\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoNotExist() {\n        // Setup\n        String isvNo = \"987654\";\n        \n        // Step 1: Mock the isvInfoService.getById method to return null\n        when(isvInfoService.getById(isvNo)).thenReturn(null);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo does not exist\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoWithMch() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return a non-zero value\n        when(mchInfoService.count(any())).thenReturn(1);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the isvNo has associated merchants\n    }\n    \n    @Test(expected = BizException.class)\n    public void testRemoveByIsvNoRemoveFail() {\n        // Setup\n        String isvNo = \"123456\";\n        \n        // Step 1: Create a mock IsvInfo object\n        IsvInfo mockIsvInfo = new IsvInfo();\n        mockIsvInfo.setIsvNo(isvNo);\n        when(isvInfoService.getById(isvNo)).thenReturn(mockIsvInfo);\n        \n        // Step 2: Mock the count method to return 0\n        when(mchInfoService.count(any())).thenReturn(0);\n        \n        // Step 3: Mock the remove method to return false\n        when(isvInfoService.removeById(isvNo)).thenReturn(false);\n        \n        // Execution\n        isvInfoService.removeByIsvNo(isvNo);\n        \n        // Verification\n        // The test should throw a BizException since the removal of the isvNo failed\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#9": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRangeToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(new Date()), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(yesterday), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        Date offsetDayDate = DateUtil.offsetDay(new Date(), -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|7\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Date offsetDayDate = DateUtil.offsetDay(yesterday, -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parse(\"2022-01-01 00:00:00\"), result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 12:00:00,2022-01-02 12:00:00\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-01 12:00:00\"), result[0]);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-02 12:00:00\"), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeEmpty() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        Assertions.assertNotNull(result);\n        Assertions.assertNull(result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidParam() {\n        Assertions.assertThrows(BizException.class, () -> {\n            DateKit.getQueryDateRange(\"invalid|param\");\n        });\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidCustomDate() {\n        Assertions.assertThrows(BizException.class, () -> {\n            DateKit.getQueryDateRange(\"customDate|2022-01-01,2022-01-02,2022-01-03\");\n        });\n    }\n\n}\n","package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRangeToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(new Date()), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(yesterday), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        Date offsetDayDate = DateUtil.offsetDay(new Date(), -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|7\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Date offsetDayDate = DateUtil.offsetDay(yesterday, -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parse(\"2022-01-01 00:00:00\"), result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 12:00:00,2022-01-02 12:00:00\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-01 12:00:00\"), result[0]);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-02 12:00:00\"), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeEmpty() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        Assertions.assertNotNull(result);\n        Assertions.assertNull(result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidParam() {\n        Assertions.assertThrows(BizException.class, () -> {\n            DateKit.getQueryDateRange(\"invalid|param\");\n        });\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidCustomDate() {\n        Assertions.assertThrows(BizException.class, () -> {\n","package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void testGetQueryDateRangeToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(new Date()), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(yesterday), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        Date offsetDayDate = DateUtil.offsetDay(new Date(), -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(new Date()), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|7\");\n        Date yesterday = DateUtil.offsetDay(new Date(), -1).toJdkDate();\n        Date offsetDayDate = DateUtil.offsetDay(yesterday, -7).toJdkDate();\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateKit.getBegin(offsetDayDate), result[0]);\n        Assertions.assertEquals(DateKit.getEnd(yesterday), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parse(\"2022-01-01 00:00:00\"), result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 12:00:00,2022-01-02 12:00:00\");\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-01 12:00:00\"), result[0]);\n        Assertions.assertEquals(DateUtil.parseDateTime(\"2022-01-02 12:00:00\"), result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeEmpty() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        Assertions.assertNotNull(result);\n        Assertions.assertNull(result[0]);\n        Assertions.assertNull(result[1]);\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidParam() {\n        Assertions.assertThrows(BizException.class, () -> {\n            DateKit.getQueryDateRange(\"invalid|param\");\n        });\n    }\n\n    @Test\n    public void testGetQueryDateRangeInvalidCustomDate() {\n        Assertions.assertThrows(BizException.class, () -> {\n            DateKit.getQueryDateRange(\"customDate|2022-01-01,2022-01-02,2022-01-03\");\n        });\n    }\n\n}\n"]
  },
  "java_ut_eval_case#jeepay#10": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_withNull() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(null));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withEmptyString() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPlusSign() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"+1\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPositiveCent() {\n        assertEquals(\"1.00\", AmountUtil.convertCent2Dollar(\"100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withNegativeCent() {\n        assertEquals(\"-1.00\", AmountUtil.convertCent2Dollar(\"-100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withZero() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(\"0\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withOneDigitAfterDecimal() {\n        assertEquals(\"0.1\", AmountUtil.convertCent2Dollar(\"10\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withTwoDigitsAfterDecimal() {\n        assertEquals(\"10.56\", AmountUtil.convertCent2Dollar(\"1056\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withLeadingZeros() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"001\"));\n    }\n\n    // Add more test cases if needed...\n\n}\n","package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_withNull() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(null));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withEmptyString() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPlusSign() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"+1\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPositiveCent() {\n        assertEquals(\"1.00\", AmountUtil.convertCent2Dollar(\"100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withNegativeCent() {\n        assertEquals(\"-1.00\", AmountUtil.convertCent2Dollar(\"-100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withZero() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(\"0\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withOneDigitAfterDecimal() {\n        assertEquals(\"0.1\", AmountUtil.convertCent2Dollar(\"10\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withTwoDigitsAfterDecimal() {\n        assertEquals(\"10.56\", AmountUtil.convertCent2Dollar(\"1056\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withLeadingZeros() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"001\"));\n    }\n\n    // Add more test cases if needed...\n\n}\n","package com.jeequan.jeepay.core.utils;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void testConvertCent2Dollar_withNull() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(null));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withEmptyString() {\n        assertEquals(\"\", AmountUtil.convertCent2Dollar(\"\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPlusSign() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"+1\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withPositiveCent() {\n        assertEquals(\"1.00\", AmountUtil.convertCent2Dollar(\"100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withNegativeCent() {\n        assertEquals(\"-1.00\", AmountUtil.convertCent2Dollar(\"-100\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withZero() {\n        assertEquals(\"0.00\", AmountUtil.convertCent2Dollar(\"0\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withOneDigitAfterDecimal() {\n        assertEquals(\"0.1\", AmountUtil.convertCent2Dollar(\"10\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withTwoDigitsAfterDecimal() {\n        assertEquals(\"10.56\", AmountUtil.convertCent2Dollar(\"1056\"));\n    }\n\n    @Test\n    public void testConvertCent2Dollar_withLeadingZeros() {\n        assertEquals(\"0.01\", AmountUtil.convertCent2Dollar(\"001\"));\n    }\n\n    // Add more test cases if needed...\n\n}\n"]
  },
  "java_ut_eval_case#jeepay#11": {
    "ut_code": ["import static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class LocalFileServiceTest {\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @Mock\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private MultipartFile multipartFile;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrl_public() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PUBLIC;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n        String expectedUrl = \"http://public.oss.com/\" + saveDirAndFileName;\n\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/path/to/public\");\n\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://public.oss.com\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(expectedUrl, result);\n    }\n\n    @Test\n    public void upload2PreviewUrl_private() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PRIVATE;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/path/to/private\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(saveDirAndFileName, result);\n    }\n\n    // Add more tests for different scenarios\n}\n","import static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class LocalFileServiceTest {\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @Mock\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private MultipartFile multipartFile;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrl_public() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PUBLIC;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n        String expectedUrl = \"http://public.oss.com/\" + saveDirAndFileName;\n\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/path/to/public\");\n\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://public.oss.com\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(expectedUrl, result);\n    }\n\n    @Test\n    public void upload2PreviewUrl_private() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PRIVATE;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/path/to/private\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(saveDirAndFileName, result);\n    }\n\n    // Add more tests for different scenarios\n}\n","import static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class LocalFileServiceTest {\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @Mock\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private MultipartFile multipartFile;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrl_public() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PUBLIC;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n        String expectedUrl = \"http://public.oss.com/\" + saveDirAndFileName;\n\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/path/to/public\");\n\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://public.oss.com\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(expectedUrl, result);\n    }\n\n    @Test\n    public void upload2PreviewUrl_private() throws IOException {\n        // Arrange\n        OssSavePlaceEnum ossSavePlaceEnum = OssSavePlaceEnum.PRIVATE;\n        String saveDirAndFileName = \"testDir/testFile.txt\";\n\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/path/to/private\");\n\n        // Act\n        String result = localFileService.upload2PreviewUrl(ossSavePlaceEnum, multipartFile, saveDirAndFileName);\n\n        // Assert\n        assertEquals(saveDirAndFileName, result);\n    }\n\n    // Add more tests for different scenarios\n}\n"]
  },
  "java_ut_eval_case#jeepay#12": {
    "ut_code": ["import static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport xxx.SysUser;\nimport xxx.SysUserAuthService;\nimport xxx.SysUserMapper;\n\npublic class SysUserServiceTest {\n\n    @Mock\n    private SysUserMapper baseMapper;\n\n    @Mock\n    private SysUserAuthService sysUserAuthService;\n\n    @InjectMocks\n    private SysUserService sysUserService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateSysUser() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n\n        // Act\n        sysUserService.updateSysUser(sysUser);\n\n        // Assert\n        verify(baseMapper).updateById(sysUser);\n        verify(sysUserAuthService).resetAuthInfo(any(Long.class), any(String.class), any(String.class), any(String.class), any(String.class));\n    }\n\n    @Test\n    public void testUpdateSysUserNotExist() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(2L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        when(baseMapper.selectById(2L)).thenReturn(null);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateTelphone() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"654321\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"123456\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateLoginUsername() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"admin\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n}\n","import static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport xxx.SysUser;\nimport xxx.SysUserAuthService;\nimport xxx.SysUserMapper;\n\npublic class SysUserServiceTest {\n\n    @Mock\n    private SysUserMapper baseMapper;\n\n    @Mock\n    private SysUserAuthService sysUserAuthService;\n\n    @InjectMocks\n    private SysUserService sysUserService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateSysUser() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n\n        // Act\n        sysUserService.updateSysUser(sysUser);\n\n        // Assert\n        verify(baseMapper).updateById(sysUser);\n        verify(sysUserAuthService).resetAuthInfo(any(Long.class), any(String.class), any(String.class), any(String.class), any(String.class));\n    }\n\n    @Test\n    public void testUpdateSysUserNotExist() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(2L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        when(baseMapper.selectById(2L)).thenReturn(null);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateTelphone() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"654321\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"123456\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateLoginUsername() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"admin\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n}\n","import static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport xxx.SysUser;\nimport xxx.SysUserAuthService;\nimport xxx.SysUserMapper;\n\npublic class SysUserServiceTest {\n\n    @Mock\n    private SysUserMapper baseMapper;\n\n    @Mock\n    private SysUserAuthService sysUserAuthService;\n\n    @InjectMocks\n    private SysUserService sysUserService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testUpdateSysUser() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n\n        // Act\n        sysUserService.updateSysUser(sysUser);\n\n        // Assert\n        verify(baseMapper).updateById(sysUser);\n        verify(sysUserAuthService).resetAuthInfo(any(Long.class), any(String.class), any(String.class), any(String.class), any(String.class));\n    }\n\n    @Test\n    public void testUpdateSysUserNotExist() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(2L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"test\");\n\n        when(baseMapper.selectById(2L)).thenReturn(null);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateTelphone() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"654321\");\n        sysUser.setLoginUsername(\"test\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"123456\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n\n    @Test\n    public void testUpdateSysUserDuplicateLoginUsername() {\n        // Arrange\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"123456\");\n        sysUser.setLoginUsername(\"admin\");\n\n        SysUser dbRecord = new SysUser();\n        dbRecord.setSysUserId(1L);\n        dbRecord.setTelphone(\"654321\");\n        dbRecord.setLoginUsername(\"admin\");\n\n        when(baseMapper.selectById(1L)).thenReturn(dbRecord);\n        when(baseMapper.selectCount(any())).thenReturn(1L);\n\n        // Act & Assert\n        org.junit.jupiter.api.Assertions.assertThrows(BizException.class, () -> {\n            sysUserService.updateSysUser(sysUser);\n        });\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#13": {
    "ut_code": ["package com.jeequan.jeepay.core.ctrls;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class AbstractCtrlTest {\n\n    @Test\n    public void testRequest2PayResponseMap() {\n        // 创建Mock对象\n        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n\n        // 定义Mock对象的行为\n        when(mockRequest.getParameter(\"param1\")).thenReturn(\"value1\");\n        when(mockRequest.getParameter(\"param2\")).thenReturn(\"value2\");\n        when(mockRequest.getParameter(\"param3\")).thenReturn(null); // 模拟获取不到参数的情况\n\n        // 创建待测类实例\n        AbstractCtrl abstractCtrl = new AbstractCtrl() {};\n\n        // 测试数据\n        String[] paramArray = new String[]{\"param1\", \"param2\", \"param3\"};\n\n        // 调用待测方法\n        Map<String, Object> responseMap = abstractCtrl.request2payResponseMap(mockRequest, paramArray);\n\n        // 断言结果\n        assertEquals(2, responseMap.size()); // 预期结果是2个键值对，因为param3应该是null并且不会被添加到map中\n        assertEquals(\"value1\", responseMap.get(\"param1\"));\n        assertEquals(\"value2\", responseMap.get(\"param2\"));\n        assertEquals(null, responseMap.get(\"param3\"));\n    }\n\n}\n"]
  },
  "java_ut_eval_case#jeepay#14": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.entity.PayInterfaceDefine;\nimport com.jeequan.jeepay.service.MchAppService;\nimport com.jeequan.jeepay.service.MchInfoService;\nimport com.jeequan.jeepay.service.PayInterfaceDefineService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass PayInterfaceConfigServiceTest {\n\n    @InjectMocks\n    private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Mock\n    private MchAppService mchAppService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private PayInterfaceDefineService payInterfaceDefineService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testSelectAllPayIfConfigListByAppId() {\n        // Arrange\n        String appId = \"appId123\";\n        MchApp mockMchApp = new MchApp();\n        mockMchApp.setAppId(appId);\n        mockMchApp.setState(CS.YES);\n\n        MchInfo mockMchInfo = new MchInfo();\n        mockMchInfo.setMchNo(\"mchNo123\");\n        mockMchInfo.setState(CS.YES);\n        mockMchInfo.setType(CS.MCH_TYPE_NORMAL);\n\n        List<PayInterfaceDefine> mockDefineList = new ArrayList<>();\n        PayInterfaceDefine mockDefine = new PayInterfaceDefine();\n        mockDefine.setIfCode(\"wxpay\");\n        mockDefine.setState(CS.YES);\n        mockDefineList.add(mockDefine);\n\n        Map<String, PayInterfaceConfig> isvPayConfigMap = new HashMap<>();\n\n        when(mchAppService.getById(appId)).thenReturn(mockMchApp);\n        when(mchInfoService.getById(mockMchApp.getMchNo())).thenReturn(mockMchInfo);\n        when(payInterfaceDefineService.list(any())).thenReturn(mockDefineList);\n\n        // Act\n        List<PayInterfaceDefine> result = payInterfaceConfigService.selectAllPayIfConfigListByAppId(appId);\n\n        // Assert\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        assertEquals(\"wxpay\", result.get(0).getIfCode());\n\n        // Verify interactions\n        verify(mchAppService).getById(appId);\n        verify(mchInfoService).getById(mockMchApp.getMchNo());\n        verify(payInterfaceDefineService).list(any());\n    }\n\n    // Add more test cases for different scenarios...\n}\n"]
  },
  "java_ut_eval_case#jeepay#15": {
    "ut_code": ["package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.MchNotifyRecord;\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.service.impl.MchNotifyRecordService;\nimport com.jeequan.jeepay.components.mq.vender.IMQSender;\nimport com.jeequan.jeepay.core.utils.StringKit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nclass PayMchNotifyServiceTest {\n\n    @InjectMocks\n    private PayMchNotifyService payMchNotifyService;\n\n    @Mock\n    private MchNotifyRecordService mchNotifyRecordService;\n\n    @Mock\n    private IMQSender mqSender;\n\n    @Mock\n    private ConfigContextQueryService configContextQueryService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testRefundOrderNotify() {\n        // Arrange\n        RefundOrder dbRefundOrder = new RefundOrder();\n        dbRefundOrder.setRefundOrderId(\"refund123\");\n        dbRefundOrder.setMchNo(\"mch123\");\n        dbRefundOrder.setAppId(\"app123\");\n        dbRefundOrder.setNotifyUrl(\"http://example.com/notify\");\n\n        MchApp mchApp = new MchApp();\n        mchApp.setAppSecret(\"appSecret\");\n\n        when(configContextQueryService.queryMchApp(anyString(), anyString())).thenReturn(mchApp);\n\n        // Act\n        payMchNotifyService.refundOrderNotify(dbRefundOrder);\n\n        // Assert\n        verify(mchNotifyRecordService, times(1)).save(any(MchNotifyRecord.class));\n        verify(mqSender, times(1)).send(any());\n    }\n\n    @Test\n    void testRefundOrderNotifyWithEmptyNotifyUrl() {\n        // Arrange\n        RefundOrder dbRefundOrder = new RefundOrder();\n        dbRefundOrder.setRefundOrderId(\"refund123\");\n        dbRefundOrder.setMchNo(\"mch123\");\n        dbRefundOrder.setAppId(\"app123\");\n        dbRefundOrder.setNotifyUrl(\"\");\n\n        // Act\n        payMchNotifyService.refundOrderNotify(dbRefundOrder);\n\n        // Assert\n        verify(mchNotifyRecordService, never()).save(any(MchNotifyRecord.class));\n        verify(mqSender, never()).send(any());\n    }\n\n    // Add more test cases as needed...\n}\n"]
  },
  "java_ut_eval_case#jeepay#16": {
    "ut_code": ["package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.service.impl.RefundOrderService;\nimport com.jeequan.jeepay.service.impl.PayMchNotifyService;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RefundOrderProcessServiceTest {\n\n    @InjectMocks\n    private RefundOrderProcessService refundOrderProcessService;\n\n    @Mock\n    private RefundOrderService refundOrderService;\n\n    @Mock\n    private PayMchNotifyService payMchNotifyService;\n\n    public RefundOrderProcessServiceTest() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testHandleRefundOrder4Channel_confirmSuccess() {\n        // Arrange\n        String refundOrderId = \" refundOrderId_123 \";\n        String channelOrderId = \" channelOrderId_123 \";\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS, channelOrderId, null, null);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(refundOrderId);\n        refundOrder.setNotifyUrl(\" http://merchant.com/notify \");\n        \n        when(refundOrderService.updateIng2Success(refundOrderId, channelOrderId)).thenReturn(true);\n        \n        // Act\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        \n        // Assert\n        assertTrue(result);\n        verify(refundOrderService, times(1)).updateIng2Success(refundOrderId, channelOrderId);\n        verify(payMchNotifyService, times(1)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    void testHandleRefundOrder4Channel_confirmFail() {\n        // Arrange\n        String refundOrderId = \" refundOrderId_456 \";\n        String channelOrderId = \" channelOrderId_456 \";\n        String channelErrCode = \" 1001 \";\n        String channelErrMsg = \" refund failed \";\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg(ChannelRetMsg.ChannelState.CONFIRM_FAIL, channelOrderId, channelErrCode, channelErrMsg);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(refundOrderId);\n        refundOrder.setNotifyUrl(\" http://merchant.com/notify \");\n        \n        when(refundOrderService.updateIng2Fail(refundOrderId, channelOrderId, channelErrCode, channelErrMsg)).thenReturn(true);\n\n        // Act\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n        \n        // Assert\n        assertTrue(result);\n        verify(refundOrderService, times(1)).updateIng2Fail(refundOrderId, channelOrderId, channelErrCode, channelErrMsg);\n        verify(payMchNotifyService, times(1)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    // More test cases can be added as needed...\n}\n"]
  },
  "java_ut_eval_case#jeepay#17": {
    "ut_code": ["package com.jeequan.jeepay.service.impl;\n\nimport com.jeequan.jeepay.core.entity.PayOrderDivisionRecord;\nimport com.jeequan.jeepay.service.mapper.PayOrderDivisionRecordMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nclass PayOrderDivisionRecordServiceTest {\n\n    @Mock\n    private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @InjectMocks\n    private PayOrderDivisionRecordService payOrderDivisionRecordService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testUpdateRecordSuccessOrFail() {\n        // Arrange\n        Byte state = PayOrderDivisionRecord.STATE_SUCCESS; // Or PayOrderDivisionRecord.STATE_FAIL\n        String channelBatchOrderId = \"channelBatchOrderId123\";\n        String channelRespResult = \"success\";\n\n        PayOrderDivisionRecord record1 = new PayOrderDivisionRecord();\n        record1.setRecordId(1L);\n        PayOrderDivisionRecord record2 = new PayOrderDivisionRecord();\n        record2.setRecordId(2L);\n        List<PayOrderDivisionRecord> records = List.of(record1, record2);\n\n        // Act\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, state, channelBatchOrderId, channelRespResult);\n\n        // Assert\n        verify(payOrderDivisionRecordMapper, times(1)).update(any(PayOrderDivisionRecord.class), any());\n    }\n\n    // Add more test cases as necessary...\n}\n"]
  },
  "java_ut_eval_case#jeepay#18": {
    "ut_code": ["package com.jeequan.jeepay.core.utils;\n\nimport com.jeequan.jeepay.core.exception.BizException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass JeepayKitTest {\n\n    @Test\n    void testGetPayWayCodeByBarCodeWithValidWeChat() {\n        String barCode = \"101234567890123456\";\n        String payWayCode = JeepayKit.getPayWayCodeByBarCode(barCode);\n        assertEquals(CS.PAY_WAY_CODE.WX_BAR, payWayCode);\n    }\n\n    @Test\n    void testGetPayWayCodeByBarCodeWithValidAlipay() {\n        String barCode = \"2512345678901234567890\";\n        String payWayCode = JeepayKit.getPayWayCodeByBarCode(barCode);\n        assertEquals(CS.PAY_WAY_CODE.ALI_BAR, payWayCode);\n    }\n\n    @Test\n    void testGetPayWayCodeByBarCodeWithValidYunShanFu() {\n        String barCode = \"621234567890123456789012\";\n        String payWayCode = JeepayKit.getPayWayCodeByBarCode(barCode);\n        assertEquals(CS.PAY_WAY_CODE.YSF_BAR, payWayCode);\n    }\n\n    @Test\n    void testGetPayWayCodeByBarCodeWithInvalid() {\n        String barCode = \"99123456789012345678901234\";\n        assertThrows(BizException.class, () -> {\n            JeepayKit.getPayWayCodeByBarCode(barCode);\n        });\n    }\n\n    @Test\n    void testGetPayWayCodeByBarCodeWithEmpty() {\n        String barCode = \"\";\n        assertThrows(BizException.class, () -> {\n            JeepayKit.getPayWayCodeByBarCode(barCode);\n        });\n    }\n\n    // 根据实际需求，可以添加更多的边界条件和异常情况测试\n}\n"]
  },
  "java_ut_eval_case#jeepay#19": {
    "ut_code": ["package com.jeequan.jeepay.pay.service;\n\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.pay.model.MchInfoConfigContext;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nclass ConfigContextServiceTest {\n\n    @InjectMocks\n    private ConfigContextService configContextService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private MchAppService mchAppService;\n\n    // 在每个测试用例执行前初始化Mocks\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testInitMchInfoConfigContext() {\n        // Arrange\n        String mchNo = \"1000000001\";\n        MchInfo mchInfo = mock(MchInfo.class);\n        MchApp mchApp = mock(MchApp.class);\n        when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n        when(mchAppService.list(any())).thenReturn(List.of(mchApp));\n\n        // Act\n        configContextService.initMchInfoConfigContext(mchNo);\n\n        // Assert\n        // 这里通过assert来验证预期的行为，具体实现取决于你的需求\n        // 例如，可以验证是否正确地向Map中添加了MchInfoConfigContext对象\n        // ...\n    }\n\n    // 其他测试用例...\n}\n"]
  }
}