{
  "java_ut_eval_case#jeepay#0": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class RefundOrderServiceTest {\n\n    @InjectMocks\n    private RefundOrderService refundOrderService;\n\n    @Mock\n    private RefundOrderMapper refundOrderMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateIng2SuccessOrFail_Success() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = null;\n        String channelErrMsg = null;\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    public void updateIng2SuccessOrFail_Fail() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_FAIL;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"Error message\";\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    public void updateIng2SuccessOrFail_InvalidState() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = 99; // Invalid state\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"Error message\";\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertFalse(result);\n        verify(refundOrderMapper, never()).update(any(), any());\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass RefundOrderServiceTest {\n\n    @Mock\n    private RefundOrderMapper refundOrderMapper;\n\n    @InjectMocks\n    private RefundOrderService refundOrderService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void shouldUpdateIng2SuccessOrFailWhenStateIsSuccess() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    void shouldUpdateIng2SuccessOrFailWhenStateIsFail() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_FAIL;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    void shouldNotUpdateIng2SuccessOrFailWhenStateIsIng() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_ING;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(0)).update(any(), any());\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass RefundOrderServiceTest {\n\n    @Mock\n    private RefundOrderMapper refundOrderMapper;\n\n    @InjectMocks\n    private RefundOrderService refundOrderService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void shouldUpdateIng2SuccessOrFailWhenStateIsSuccess() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_SUCCESS;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    void shouldUpdateIng2SuccessOrFailWhenStateIsFail() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_FAIL;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        when(refundOrderMapper.update(any(), any())).thenReturn(true);\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    void shouldNotUpdateIng2SuccessOrFailWhenStateIsIng() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = RefundOrder.STATE_ING;\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertTrue(result);\n        verify(refundOrderMapper, times(0)).update(any(), any());\n    }\n\n    @Test\n    void shouldNotUpdateIng2SuccessOrFailWhenStateIsInvalid() {\n        String refundOrderId = \"refund123\";\n        Byte updateState = 99; // Invalid state\n        String channelOrderNo = \"channel123\";\n        String channelErrCode = \"err123\";\n        String channelErrMsg = \"error message\";\n\n        boolean result = refundOrderService.updateIng2SuccessOrFail(refundOrderId, updateState, channelOrderNo, channelErrCode, channelErrMsg);\n\n        assertFalse(result);\n        verify(refundOrderMapper, times(0)).update(any(), any());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#1": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.mockito.Mockito.*;\n\nclass AuthServiceTest {\n\n    @Mock\n    private RedisUtil redisUtil;\n\n    @InjectMocks\n    private AuthService authService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void shouldDeleteAuthenticationForMultipleUsers() {\n        when(redisUtil.keys(anyString())).thenReturn(Arrays.asList(\"key1\", \"key2\"));\n\n        authService.delAuthentication(Arrays.asList(1L, 2L));\n\n        verify(redisUtil, times(4)).del(anyString());\n    }\n\n    @Test\n    void shouldDeleteAuthenticationForSingleUser() {\n        when(redisUtil.keys(anyString())).thenReturn(Collections.singletonList(\"key1\"));\n\n        authService.delAuthentication(Collections.singletonList(1L));\n\n        verify(redisUtil, times(1)).del(anyString());\n    }\n\n    @Test\n    void shouldNotDeleteAuthenticationWhenNoUsersProvided() {\n        authService.delAuthentication(Collections.emptyList());\n\n        verify(redisUtil, times(0)).del(anyString());\n    }\n\n    @Test\n    void shouldNotDeleteAuthenticationWhenNoKeysFound() {\n        when(redisUtil.keys(anyString())).thenReturn(Collections.emptyList());\n\n        authService.delAuthentication(Arrays.asList(1L, 2L));\n\n        verify(redisUtil, times(0)).del(anyString());\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.*;\n\npublic class AuthServiceTest {\n\n    @Mock\n    private StringRedisTemplate stringRedisTemplate;\n\n    @InjectMocks\n    private AuthService authService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void shouldDeleteAuthenticationForMultipleUsers() {\n        when(stringRedisTemplate.keys(anyString())).thenReturn(Collections.singleton(\"key1\"));\n        authService.delAuthentication(Arrays.asList(1L, 2L));\n        verify(stringRedisTemplate, times(2)).delete(anyString());\n    }\n\n    @Test\n    public void shouldNotDeleteAuthenticationWhenNoUsersProvided() {\n        authService.delAuthentication(Collections.emptyList());\n        verify(stringRedisTemplate, never()).delete(anyString());\n    }\n\n    @Test\n    public void shouldNotDeleteAuthenticationWhenNoKeysFound() {\n        when(stringRedisTemplate.keys(anyString())).thenReturn(Collections.emptySet());\n        authService.delAuthentication(Arrays.asList(1L));\n        verify(stringRedisTemplate, never()).delete(anyString());\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.mockito.Mockito.*;\n\npublic class AuthServiceTest {\n\n    @InjectMocks\n    private AuthService authService;\n\n    @Mock\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Mock\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void shouldDeleteAuthenticationForMultipleUsers() {\n        when(stringRedisTemplate.keys(\"token:*:user1\")).thenReturn(Collections.singleton(\"token:123:user1\"));\n        when(stringRedisTemplate.keys(\"token:*:user2\")).thenReturn(Collections.singleton(\"token:456:user2\"));\n\n        authService.delAuthentication(Arrays.asList(1L, 2L));\n\n        verify(redisTemplate, times(1)).delete(\"token:123:user1\");\n        verify(redisTemplate, times(1)).delete(\"token:456:user2\");\n    }\n\n    @Test\n    public void shouldNotDeleteAuthenticationIfNoUsersProvided() {\n        authService.delAuthentication(Collections.emptyList());\n\n        verify(stringRedisTemplate, times(0)).keys(anyString());\n        verify(redisTemplate, times(0)).delete(anyString());\n    }\n\n    @Test\n    public void shouldNotDeleteAuthenticationIfNoTokensFound() {\n        when(stringRedisTemplate.keys(\"token:*:user1\")).thenReturn(Collections.emptySet());\n\n        authService.delAuthentication(Collections.singletonList(1L));\n\n        verify(redisTemplate, times(0)).delete(anyString());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#2": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.ChannelOrderReissueService;\nimport com.jeequan.jeepay.pay.service.ConfigContextQueryService;\nimport com.jeequan.jeepay.pay.service.RefundOrderProcessService;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class ChannelOrderReissueServiceTest {\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock\n    private ConfigContextQueryService configContextQueryService;\n\n    @Mock\n    private PayOrderService payOrderService;\n\n    @Mock\n    private RefundOrderProcessService refundOrderProcessService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should process refund order successfully\")\n    public void shouldProcessRefundOrderSuccessfully() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"123456\");\n\n        when(configContextQueryService.queryMchInfoAndAppInfo(any(), any())).thenReturn(new MchAppConfigContext());\n        when(refundOrderProcessService.handleRefundOrder4Channel(any(), any())).thenReturn(new ChannelRetMsg());\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNotNull(result);\n    }\n\n    @Test\n    @DisplayName(\"Should return null when refund service interface does not exist\")\n    public void shouldReturnNullWhenRefundServiceInterfaceDoesNotExist() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"123456\");\n        refundOrder.setIfCode(\"NonExistentService\");\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n\n    @Test\n    @DisplayName(\"Should return null when channelRetMsg is null\")\n    public void shouldReturnNullWhenChannelRetMsgIsNull() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setRefundOrderId(\"123456\");\n\n        when(configContextQueryService.queryMchInfoAndAppInfo(any(), any())).thenReturn(new MchAppConfigContext());\n        when(refundOrderProcessService.handleRefundOrder4Channel(any(), any())).thenReturn(null);\n\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        assertNull(result);\n    }\n}","import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.ChannelOrderReissueService;\nimport com.jeequan.jeepay.pay.service.ConfigContextQueryService;\nimport com.jeequan.jeepay.pay.service.RefundOrderProcessService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n@SpringBootTest\npublic class ChannelOrderReissueServiceTest {\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @Mock\n    private ConfigContextQueryService configContextQueryService;\n\n    @Mock\n    private RefundOrderProcessService refundOrderProcessService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should process refund order successfully\")\n    public void shouldProcessRefundOrderSuccessfully() {\n        RefundOrder refundOrder = new RefundOrder();\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n\n        when(configContextQueryService.queryMchInfoAndAppInfo(any(), any())).thenReturn(new MchAppConfigContext());\n        when(refundOrderProcessService.handleRefundOrder4Channel(any(), any())).thenReturn(channelRetMsg);\n\n        channelOrderReissueService.processRefundOrder(refundOrder);\n\n        verify(configContextQueryService, times(1)).queryMchInfoAndAppInfo(any(), any());\n        verify(refundOrderProcessService, times(1)).handleRefundOrder4Channel(any(), any());\n    }\n\n    @Test\n    @DisplayName(\"Should handle exception when processing refund order\")\n    public void shouldHandleExceptionWhenProcessingRefundOrder() {\n        RefundOrder refundOrder = new RefundOrder();\n\n        when(configContextQueryService.queryMchInfoAndAppInfo(any(), any())).thenThrow(new RuntimeException());\n\n        channelOrderReissueService.processRefundOrder(refundOrder);\n\n        verify(configContextQueryService, times(1)).queryMchInfoAndAppInfo(any(), any());\n    }\n}","import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.ChannelOrderReissueService;\nimport com.jeequan.jeepay.pay.service.ConfigContextQueryService;\nimport com.jeequan.jeepay.pay.service.RefundOrderProcessService;\nimport com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass ChannelOrderReissueServiceTest {\n\n    @Mock\n    private ConfigContextQueryService configContextQueryService;\n\n    @Mock\n    private PayOrderService payOrderService;\n\n    @Mock\n    private RefundOrderProcessService refundOrderProcessService;\n\n    @InjectMocks\n    private ChannelOrderReissueService channelOrderReissueService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void processRefundOrderShouldReturnChannelRetMsgWhenRefundServiceExists() {\n        // Given\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setIfCode(\"testCode\");\n        refundOrder.setMchNo(\"testMchNo\");\n        refundOrder.setAppId(\"testAppId\");\n\n        // When\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        // Then\n        assertNotNull(result);\n        verify(configContextQueryService, times(1)).queryMchInfoAndAppInfo(refundOrder.getMchNo(), refundOrder.getAppId());\n        verify(refundOrderProcessService, times(1)).handleRefundOrder4Channel(any(ChannelRetMsg.class), eq(refundOrder));\n    }\n\n    @Test\n    void processRefundOrderShouldReturnNullWhenRefundServiceDoesNotExist() {\n        // Given\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setIfCode(\"nonExistentCode\");\n        refundOrder.setMchNo(\"testMchNo\");\n        refundOrder.setAppId(\"testAppId\");\n\n        // When\n        ChannelRetMsg result = channelOrderReissueService.processRefundOrder(refundOrder);\n\n        // Then\n        assertNull(result);\n        verify(configContextQueryService, times(1)).queryMchInfoAndAppInfo(refundOrder.getMchNo(), refundOrder.getAppId());\n        verify(refundOrderProcessService, never()).handleRefundOrder4Channel(any(ChannelRetMsg.class), eq(refundOrder));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#3": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class SysConfigServiceTest {\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void shouldUpdateConfigKeysSuccessfully() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(2);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(2, result);\n    }\n\n    @Test\n    public void shouldReturnZeroWhenNoKeysToUpdate() {\n        Map<String, String> updateMap = new HashMap<>();\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(0);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void shouldReturnZeroWhenUpdateFails() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(0);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(0, result);\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class SysConfigServiceTest {\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesMultipleKeys() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n        updateMap.put(\"key3\", \"value3\");\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(3);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(3, result);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesSingleKey() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(1);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(1, result);\n    }\n\n    @Test\n    public void updateByConfigKey_noKeysToUpdate() {\n        Map<String, String> updateMap = new HashMap<>();\n\n        when(sysConfigMapper.updateByConfigKey(updateMap)).thenReturn(0);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(0, result);\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class SysConfigServiceTest {\n\n    @InjectMocks\n    private SysConfigService sysConfigService;\n\n    @Mock\n    private SysConfigMapper sysConfigMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesMultipleKeys() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n\n        when(sysConfigService.saveOrUpdate(new SysConfig(\"key1\", \"value1\"))).thenReturn(true);\n        when(sysConfigService.saveOrUpdate(new SysConfig(\"key2\", \"value2\"))).thenReturn(true);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(2, result);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesNoKeysWhenUpdateFails() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n\n        when(sysConfigService.saveOrUpdate(new SysConfig(\"key1\", \"value1\"))).thenReturn(false);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesSomeKeysWhenSomeUpdatesFail() {\n        Map<String, String> updateMap = new HashMap<>();\n        updateMap.put(\"key1\", \"value1\");\n        updateMap.put(\"key2\", \"value2\");\n\n        when(sysConfigService.saveOrUpdate(new SysConfig(\"key1\", \"value1\"))).thenReturn(true);\n        when(sysConfigService.saveOrUpdate(new SysConfig(\"key2\", \"value2\"))).thenReturn(false);\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(1, result);\n    }\n\n    @Test\n    public void updateByConfigKey_updatesNoKeysWhenMapIsEmpty() {\n        Map<String, String> updateMap = new HashMap<>();\n\n        int result = sysConfigService.updateByConfigKey(updateMap);\n\n        assertEquals(0, result);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#4": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @InjectMocks\n    RequestKitBean requestKitBean;\n\n    @Mock\n    HttpServletRequest request;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenXForwardedForHeaderIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.1\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenProxyClientIpHeaderIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"192.168.1.2\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.2\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenWLProxyClientIpHeaderIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"192.168.1.3\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.3\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenNoProxyHeadersAreSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(null);\n        when(request.getRemoteAddr()).thenReturn(\"192.168.1.4\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.4\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsFirstIpWhenXForwardedForHeaderHasMultipleIps() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.5,192.168.1.6\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.5\", ip);\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @InjectMocks\n    private RequestKitBean requestKitBean;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenXForwardedForHeaderIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.1\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenProxyClientIpHeaderIsSet() {\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"192.168.1.2\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.2\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenWLProxyClientIpHeaderIsSet() {\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"192.168.1.3\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.3\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsCorrectIpWhenNoProxyHeadersAreSet() {\n        when(request.getRemoteAddr()).thenReturn(\"192.168.1.4\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.4\", ip);\n    }\n\n    @Test\n    public void getClientIpReturnsFirstIpWhenXForwardedForContainsMultipleIps() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.5,192.168.1.6\");\n        String ip = requestKitBean.getClientIp();\n        assertEquals(\"192.168.1.5\", ip);\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RequestKitBeanTest {\n\n    @InjectMocks\n    private RequestKitBean requestKitBean;\n\n    @Mock\n    private HttpServletRequest request;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderXForwardedForIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.1\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.1\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderProxyClientIpIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(\"192.168.1.2\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.2\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenHeaderWLProxyClientIpIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(\"192.168.1.3\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.3\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsCorrectIp_whenRemoteAddrIsSet() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(null);\n        when(request.getHeader(\"Proxy-Client-IP\")).thenReturn(null);\n        when(request.getHeader(\"WL-Proxy-Client-IP\")).thenReturn(null);\n        when(request.getRemoteAddr()).thenReturn(\"192.168.1.4\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.4\", clientIp);\n    }\n\n    @Test\n    public void getClientIp_returnsFirstIp_whenMultipleIpsAreSetInXForwardedFor() {\n        when(request.getHeader(\"x-forwarded-for\")).thenReturn(\"192.168.1.5,192.168.1.6\");\n\n        String clientIp = requestKitBean.getClientIp();\n\n        assertEquals(\"192.168.1.5\", clientIp);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#5": {
    "ut_code": ["import com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class RabbitMQConfigTest {\n\n    @Mock\n    private RabbitMQBeanProcessor rabbitMQBeanProcessor;\n\n    @Mock\n    private BeanDefinitionRegistry beanDefinitionRegistry;\n\n    @InjectMocks\n    private RabbitMQConfig rabbitMQConfig;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n        when(rabbitMQBeanProcessor.getBeanDefinitionRegistry()).thenReturn(beanDefinitionRegistry);\n    }\n\n    @Test\n    public void shouldRegisterQueueAndDelayedBindWhenMQTypeIsNotBroadcast() {\n        // Given\n        AbstractMQ mockMQ = mock(AbstractMQ.class);\n        when(mockMQ.getMQType()).thenReturn(MQSendTypeEnum.DIRECT);\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(mockMQ.getClass());\n        when(ClassUtil.scanPackageBySuper(anyString(), any())).thenReturn(mqClasses);\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(anyString(), any());\n    }\n\n    @Test\n    public void shouldRegisterQueueAndFanoutExchangeWhenMQTypeIsBroadcast() {\n        // Given\n        AbstractMQ mockMQ = mock(AbstractMQ.class);\n        when(mockMQ.getMQType()).thenReturn(MQSendTypeEnum.BROADCAST);\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(mockMQ.getClass());\n        when(ClassUtil.scanPackageBySuper(anyString(), any())).thenReturn(mqClasses);\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(2)).registerBeanDefinition(anyString(), any());\n    }\n\n    @Test\n    public void shouldNotRegisterAnyBeanWhenNoMQClassesFound() {\n        // Given\n        Set<Class<?>> mqClasses = new HashSet<>();\n        when(ClassUtil.scanPackageBySuper(anyString(), any())).thenReturn(mqClasses);\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, never()).registerBeanDefinition(anyString(), any());\n    }\n}","import com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class RabbitMQConfigTest {\n\n    @Mock\n    private BeanDefinitionRegistry beanDefinitionRegistry;\n\n    @Mock\n    private AbstractMQ abstractMQ;\n\n    @InjectMocks\n    private RabbitMQConfig rabbitMQConfig;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should register queue and binding when MQ type is not BROADCAST\")\n    public void shouldRegisterQueueAndBindingWhenMQTypeIsNotBroadcast() {\n        // Given\n        Set<Class<?>> set = new HashSet<>();\n        set.add(AbstractMQ.class);\n        when(abstractMQ.getMQType()).thenReturn(MQSendTypeEnum.DIRECT);\n        when(abstractMQ.getMQName()).thenReturn(\"testQueue\");\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(any(), any());\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(eq(\"testQueue\"), any(BeanDefinitionBuilder.class));\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(eq(\"testQueue_DelayedBind\"), any(BeanDefinitionBuilder.class));\n    }\n\n    @Test\n    @DisplayName(\"Should register queue and fanout exchange when MQ type is BROADCAST\")\n    public void shouldRegisterQueueAndFanoutExchangeWhenMQTypeIsBroadcast() {\n        // Given\n        Set<Class<?>> set = new HashSet<>();\n        set.add(AbstractMQ.class);\n        when(abstractMQ.getMQType()).thenReturn(MQSendTypeEnum.BROADCAST);\n        when(abstractMQ.getMQName()).thenReturn(\"testQueue\");\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(any(), any());\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(eq(\"testQueue\"), any(BeanDefinitionBuilder.class));\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(eq(\"fanout_exchange_testQueue\"), any(BeanDefinitionBuilder.class));\n    }\n}","import com.jeequan.jeepay.components.mq.constant.MQSendTypeEnum;\nimport com.jeequan.jeepay.components.mq.model.AbstractMQ;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\npublic class RabbitMQConfigTest {\n\n    @Mock\n    private BeanDefinitionRegistry beanDefinitionRegistry;\n\n    @InjectMocks\n    private RabbitMQConfig rabbitMQConfig;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should register queue and binding when MQ type is not BROADCAST\")\n    public void shouldRegisterQueueAndBindingWhenMQTypeIsNotBroadcast() {\n        // Given\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(NonBroadcastMQ.class);\n        when(ClassUtil.scanPackageBySuper(anyString(), eq(AbstractMQ.class))).thenReturn(mqClasses);\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(anyString(), any(BeanDefinitionBuilder.class));\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(anyString(), any(BeanDefinitionBuilder.class));\n    }\n\n    @Test\n    @DisplayName(\"Should register queue and fanout exchange when MQ type is BROADCAST\")\n    public void shouldRegisterQueueAndFanoutExchangeWhenMQTypeIsBroadcast() {\n        // Given\n        Set<Class<?>> mqClasses = new HashSet<>();\n        mqClasses.add(BroadcastMQ.class);\n        when(ClassUtil.scanPackageBySuper(anyString(), eq(AbstractMQ.class))).thenReturn(mqClasses);\n\n        // When\n        rabbitMQConfig.init();\n\n        // Then\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(anyString(), any(BeanDefinitionBuilder.class));\n        verify(beanDefinitionRegistry, times(1)).registerBeanDefinition(anyString(), any(BeanDefinitionBuilder.class));\n    }\n}\n\nclass NonBroadcastMQ extends AbstractMQ {\n    @Override\n    public String getMQName() {\n        return \"NonBroadcastMQ\";\n    }\n\n    @Override\n    public MQSendTypeEnum getMQType() {\n        return MQSendTypeEnum.DIRECT;\n    }\n}\n\nclass BroadcastMQ extends AbstractMQ {\n    @Override\n    public String getMQName() {\n        return \"BroadcastMQ\";\n    }\n\n    @Override\n    public MQSendTypeEnum getMQType() {\n        return MQSendTypeEnum.BROADCAST;\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#6": {
    "ut_code": ["import com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class PayOrderServiceTest {\n\n    @InjectMocks\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should return valid pay count when valid mchNo and date range provided\")\n    public void shouldReturnValidPayCountWhenValidMchNoAndDateRangeProvided() {\n        when(payOrderMapper.selectOrderCount(anyString(), anyString(), anyString())).thenReturn(someMockedData());\n\n        List<Map> result = payOrderService.mainPagePayCount(\"mchNo123\", \"2022-01-01\", \"2022-01-31\");\n\n        assertNotNull(result);\n        // Add more assertions based on the expected result\n    }\n\n    @Test\n    @DisplayName(\"Should handle null mchNo gracefully\")\n    public void shouldHandleNullMchNoGracefully() {\n        when(payOrderMapper.selectOrderCount(anyString(), anyString(), anyString())).thenReturn(someMockedData());\n\n        List<Map> result = payOrderService.mainPagePayCount(null, \"2022-01-01\", \"2022-01-31\");\n\n        assertNotNull(result);\n        // Add more assertions based on the expected result\n    }\n\n    @Test\n    @DisplayName(\"Should handle null date range gracefully\")\n    public void shouldHandleNullDateRangeGracefully() {\n        when(payOrderMapper.selectOrderCount(anyString(), anyString(), anyString())).thenReturn(someMockedData());\n\n        List<Map> result = payOrderService.mainPagePayCount(\"mchNo123\", null, null);\n\n        assertNotNull(result);\n        // Add more assertions based on the expected result\n    }\n\n    // This method should return a mocked data that matches the structure of the actual data returned by the mapper\n    private List<Map> someMockedData() {\n        // return mocked data\n    }\n}","import com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class PayOrderServiceTest {\n\n    @InjectMocks\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should return pay count for given merchant and date range\")\n    public void shouldReturnPayCountForGivenMerchantAndDateRange() {\n        String mchNo = \"mch123\";\n        String createdStart = \"2022-01-01\";\n        String createdEnd = \"2022-01-31\";\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(someMockedData());\n\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        assertNotNull(result);\n        // Add more assertions based on the expected result\n    }\n\n    @Test\n    @DisplayName(\"Should return empty list when no pay count for given merchant and date range\")\n    public void shouldReturnEmptyListWhenNoPayCountForGivenMerchantAndDateRange() {\n        String mchNo = \"mch123\";\n        String createdStart = \"2022-01-01\";\n        String createdEnd = \"2022-01-31\";\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(Collections.emptyList());\n\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        assertNotNull(result);\n        assertTrue(result.isEmpty());\n    }\n\n    // Add more tests for edge cases and other scenarios\n}","import com.jeequan.jeepay.service.impl.PayOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\npublic class PayOrderServiceTest {\n\n    @InjectMocks\n    private PayOrderService payOrderService;\n\n    @Mock\n    private PayOrderMapper payOrderMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should return pay count when valid parameters are provided\")\n    public void shouldReturnPayCountWhenValidParametersAreProvided() {\n        String mchNo = \"mch123\";\n        String createdStart = \"2022-01-01\";\n        String createdEnd = \"2022-01-31\";\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(someList());\n\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        assertNotNull(result);\n    }\n\n    @Test\n    @DisplayName(\"Should return empty list when no pay count is found\")\n    public void shouldReturnEmptyListWhenNoPayCountIsFound() {\n        String mchNo = \"mch123\";\n        String createdStart = \"2022-01-01\";\n        String createdEnd = \"2022-01-31\";\n\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(emptyList());\n\n        List<Map> result = payOrderService.mainPagePayCount(mchNo, createdStart, createdEnd);\n\n        assertTrue(result.isEmpty());\n    }\n\n    @Test\n    @DisplayName(\"Should handle null parameters gracefully\")\n    public void shouldHandleNullParametersGracefully() {\n        when(payOrderMapper.selectOrderCount(any())).thenReturn(someList());\n\n        List<Map> result = payOrderService.mainPagePayCount(null, null, null);\n\n        assertNotNull(result);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#7": {
    "ut_code": ["import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void deSenDataReturnsCorrectlyDesensitizedData() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"1234567890\");\n        params.setKey(\"0987654321\");\n        params.setApiV3Key(\"1122334455\");\n        params.setSerialNo(\"5566778899\");\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"1234******7890\\\",\\\"key\\\":\\\"0987******4321\\\",\\\"apiV3Key\\\":\\\"1122******4455\\\",\\\"serialNo\\\":\\\"5566******8899\\\"}\", result);\n    }\n\n    @Test\n    public void deSenDataHandlesNullValues() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{}\", result);\n    }\n\n    @Test\n    public void deSenDataHandlesEmptyStrings() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"\");\n        params.setKey(\"\");\n        params.setApiV3Key(\"\");\n        params.setSerialNo(\"\");\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"\\\",\\\"key\\\":\\\"\\\",\\\"apiV3Key\\\":\\\"\\\",\\\"serialNo\\\":\\\"\\\"}\", result);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void deSenDataReturnsCorrectlyDesensitizedData() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"1234567890\");\n        params.setKey(\"0987654321\");\n        params.setApiV3Key(\"1122334455\");\n        params.setSerialNo(\"5566778899\");\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"1234******7890\\\",\\\"key\\\":\\\"0987******4321\\\",\\\"apiV3Key\\\":\\\"1122******4455\\\",\\\"serialNo\\\":\\\"5566******8899\\\"}\", result);\n    }\n\n    @Test\n    public void deSenDataHandlesEmptyStrings() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"\");\n        params.setKey(\"\");\n        params.setApiV3Key(\"\");\n        params.setSerialNo(\"\");\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"\\\",\\\"key\\\":\\\"\\\",\\\"apiV3Key\\\":\\\"\\\",\\\"serialNo\\\":\\\"\\\"}\", result);\n    }\n\n    @Test\n    public void deSenDataHandlesNullValues() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(null);\n        params.setKey(null);\n        params.setApiV3Key(null);\n        params.setSerialNo(null);\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":null,\\\"key\\\":null,\\\"apiV3Key\\\":null,\\\"serialNo\\\":null}\", result);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void deSenDataReturnsCorrectlyDesensitizedData() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"1234567890\");\n        params.setKey(\"0987654321\");\n        params.setApiV3Key(\"1122334455\");\n        params.setSerialNo(\"5566778899\");\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"1234******7890\\\",\\\"key\\\":\\\"0987******4321\\\",\\\"apiV3Key\\\":\\\"1122******4455\\\",\\\"serialNo\\\":\\\"5566******8899\\\"}\", result);\n    }\n\n    @Test\n    public void deSenDataReturnsEmptyStringWhenAllFieldsAreNull() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{}\", result);\n    }\n\n    @Test\n    public void deSenDataReturnsCorrectlyDesensitizedDataWhenSomeFieldsAreNull() {\n        // Given\n        WxpayIsvParams params = new WxpayIsvParams();\n        params.setAppSecret(\"1234567890\");\n        params.setKey(null);\n        params.setApiV3Key(\"1122334455\");\n        params.setSerialNo(null);\n\n        // When\n        String result = params.deSenData();\n\n        // Then\n        assertEquals(\"{\\\"appSecret\\\":\\\"1234******7890\\\",\\\"apiV3Key\\\":\\\"1122******4455\\\"}\", result);\n    }\n}","import com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.anyString;\n\npublic class WxpayIsvParamsTest {\n\n    @Test\n    public void testDeSenData() {\n        // Create a mock object of WxpayIsvParams\n        WxpayIsvParams isvParams = Mockito.spy(new WxpayIsvParams());\n\n        // Set the original values\n        isvParams.setAppSecret(\"appSecret123456\");\n        isvParams.setKey(\"key123456\");\n        isvParams.setApiV3Key(\"apiV3Key123456\");\n        isvParams.setSerialNo(\"serialNo123456\");\n\n        // Stub the StringUtils.isNotBlank method\n        Mockito.when(StringUtils.isNotBlank(anyString())).thenReturn(true);\n\n        // Stub the StringKit.str2Star method\n        Mockito.when(StringKit.str2Star(anyString(), anyInt(), anyInt(), anyInt())).thenAnswer(invocation -> {\n            String str = invocation.getArgument(0);\n            int start = invocation.getArgument(1);\n            int end = invocation.getArgument(2);\n            int length = invocation.getArgument(3);\n            return str.substring(0, start) + \"*\" + str.substring(end + length);\n        });\n\n        // Execute the deSenData method\n        String result = isvParams.deSenData();\n\n        // Verify the result\n        JSONObject jsonObject = JSONObject.parseObject(result);\n        Assertions.assertEquals(\"appS****\", jsonObject.getString(\"appSecret\"));\n        Assertions.assertEquals(\"k****\", jsonObject.getString(\"key\"));\n        Assertions.assertEquals(\"a****\", jsonObject.getString(\"apiV3Key\"));\n        Assertions.assertEquals(\"s****\", jsonObject.getString(\"serialNo\"));\n    }\n}\n"]
  },
  "java_ut_eval_case#jeepay#8": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.exception.BizException;\nimport com.jeequan.jeepay.service.impl.IsvInfoService;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class IsvInfoServiceTest {\n\n    @InjectMocks\n    private IsvInfoService isvInfoService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private PayInterfaceConfigService payInterfaceConfigService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when IsvInfo does not exist\")\n    public void removeByIsvNo_ShouldThrowBizException_WhenIsvInfoDoesNotExist() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(null);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when MchInfo exists\")\n    public void removeByIsvNo_ShouldThrowBizException_WhenMchInfoExists() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(1);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should remove PayInterfaceConfig and IsvInfo when no MchInfo exists\")\n    public void removeByIsvNo_ShouldRemovePayInterfaceConfigAndIsvInfo_WhenNoMchInfoExists() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n        when(payInterfaceConfigService.remove(any())).thenReturn(true);\n        when(isvInfoService.removeById(isvNo)).thenReturn(true);\n\n        isvInfoService.removeByIsvNo(isvNo);\n\n        verify(payInterfaceConfigService, times(1)).remove(any(PayInterfaceConfig.class));\n        verify(isvInfoService, times(1)).removeById(isvNo);\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when IsvInfo removal fails\")\n    public void removeByIsvNo_ShouldThrowBizException_WhenIsvInfoRemovalFails() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n        when(payInterfaceConfigService.remove(any())).thenReturn(true);\n        when(isvInfoService.removeById(isvNo)).thenReturn(false);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n}","import com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.exception.BizException;\nimport com.jeequan.jeepay.service.impl.IsvInfoService;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\n\npublic class IsvInfoServiceTest {\n\n    @InjectMocks\n    private IsvInfoService isvInfoService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private PayInterfaceConfigService payInterfaceConfigService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void removeByIsvNo_whenIsvExistsAndNoMchUnderIsv_thenRemovesIsv() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n\n        isvInfoService.removeByIsvNo(isvNo);\n\n        verify(isvInfoService, times(1)).removeById(isvNo);\n    }\n\n    @Test\n    public void removeByIsvNo_whenIsvDoesNotExist_thenThrowsBizException() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(null);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n\n    @Test\n    public void removeByIsvNo_whenIsvExistsAndMchUnderIsv_thenThrowsBizException() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(1);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n\n    @Test\n    public void removeByIsvNo_whenIsvExistsAndNoMchUnderIsvAndRemoveFails_thenThrowsBizException() {\n        String isvNo = \"123\";\n        when(isvInfoService.getById(isvNo)).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n        when(isvInfoService.removeById(isvNo)).thenReturn(false);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(isvNo));\n    }\n}","import com.jeequan.jeepay.core.entity.IsvInfo;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.exception.BizException;\nimport com.jeequan.jeepay.service.impl.IsvInfoService;\nimport com.jeequan.jeepay.service.impl.MchInfoService;\nimport com.jeequan.jeepay.service.impl.PayInterfaceConfigService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nclass IsvInfoServiceTest {\n\n    @InjectMocks\n    private IsvInfoService isvInfoService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private PayInterfaceConfigService payInterfaceConfigService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should remove ISV when no merchants are associated\")\n    void removeByIsvNoShouldRemoveIsvWhenNoMerchantsAreAssociated() {\n        when(isvInfoService.getById(anyString())).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n\n        isvInfoService.removeByIsvNo(\"testIsvNo\");\n\n        verify(payInterfaceConfigService, times(1)).remove(any());\n        verify(isvInfoService, times(1)).removeById(anyString());\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when ISV does not exist\")\n    void removeByIsvNoShouldThrowBizExceptionWhenIsvDoesNotExist() {\n        when(isvInfoService.getById(anyString())).thenReturn(null);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(\"testIsvNo\"));\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when merchants are associated with ISV\")\n    void removeByIsvNoShouldThrowBizExceptionWhenMerchantsAreAssociatedWithIsv() {\n        when(isvInfoService.getById(anyString())).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(1);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(\"testIsvNo\"));\n    }\n\n    @Test\n    @DisplayName(\"removeByIsvNo should throw BizException when ISV removal fails\")\n    void removeByIsvNoShouldThrowBizExceptionWhenIsvRemovalFails() {\n        when(isvInfoService.getById(anyString())).thenReturn(new IsvInfo());\n        when(mchInfoService.count(any())).thenReturn(0);\n        when(isvInfoService.removeById(anyString())).thenReturn(false);\n\n        assertThrows(BizException.class, () -> isvInfoService.removeByIsvNo(\"testIsvNo\"));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#9": {
    "ut_code": ["import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|30\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        assertNotNull(result[0]);\n        assertNull(result[1]);\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 23:00:00,2022-01-01 23:00:00\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertEquals(result[0], result[1]);\n    }\n\n    @Test\n    public void getQueryDateRangeThrowsExceptionForInvalidInput() {\n        assertThrows(BizException.class, () -> DateKit.getQueryDateRange(\"invalid|input\"));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsNullForEmptyInput() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        assertNull(result[0]);\n        assertNull(result[1]);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|30\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        assertNotNull(result[0]);\n        assertNull(result[1]);\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 23:00:00,2022-01-01 23:00:00\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].equals(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeThrowsExceptionForInvalidInput() {\n        assertThrows(BizException.class, () -> DateKit.getQueryDateRange(\"invalid|input\"));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsNullForEmptyInput() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        assertNull(result[0]);\n        assertNull(result[1]);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|30\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        assertNotNull(result[0]);\n        assertNull(result[1]);\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 23:00:00,2022-01-01 23:00:00\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].equals(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeThrowsExceptionForInvalidInput() {\n        assertThrows(BizException.class, () -> DateKit.getQueryDateRange(\"invalid|input\"));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsNullForEmptyInput() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        assertNull(result[0]);\n        assertNull(result[1]);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Date;\n\npublic class DateKitTest {\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForToday() {\n        Date[] result = DateKit.getQueryDateRange(\"today|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForYesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"yesterday|0\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Now() {\n        Date[] result = DateKit.getQueryDateRange(\"near2now|7\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForNear2Yesterday() {\n        Date[] result = DateKit.getQueryDateRange(\"near2yesterday|30\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].before(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDate() {\n        Date[] result = DateKit.getQueryDateRange(\"customDate|2022-01-01,N\");\n        assertNotNull(result[0]);\n        assertNull(result[1]);\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsCorrectRangeForCustomDateTime() {\n        Date[] result = DateKit.getQueryDateRange(\"customDateTime|2022-01-01 23:00:00,2022-01-01 23:00:00\");\n        assertNotNull(result[0]);\n        assertNotNull(result[1]);\n        assertTrue(result[0].equals(result[1]));\n    }\n\n    @Test\n    public void getQueryDateRangeThrowsExceptionForInvalidInput() {\n        assertThrows(BizException.class, () -> DateKit.getQueryDateRange(\"invalid|input\"));\n    }\n\n    @Test\n    public void getQueryDateRangeReturnsNullForEmptyInput() {\n        Date[] result = DateKit.getQueryDateRange(\"\");\n        assertNull(result[0]);\n        assertNull(result[1]);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#10": {
    "ut_code": ["import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void convertCent2Dollar_withSingleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"1\");\n        assertEquals(\"0.01\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withDoubleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"12\");\n        assertEquals(\"0.12\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withTripleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"123\");\n        assertEquals(\"1.23\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNegativeCent() {\n        String result = AmountUtil.convertCent2Dollar(\"-123\");\n        assertEquals(\"-1.23\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withZeroCent() {\n        String result = AmountUtil.convertCent2Dollar(\"0\");\n        assertEquals(\"0.00\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withEmptyString() {\n        String result = AmountUtil.convertCent2Dollar(\"\");\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNull() {\n        String result = AmountUtil.convertCent2Dollar(null);\n        assertEquals(\"\", result);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void convertCent2Dollar_withSingleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"1\");\n        assertEquals(\"0.01\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withDoubleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"12\");\n        assertEquals(\"0.12\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withTripleDigitCent() {\n        String result = AmountUtil.convertCent2Dollar(\"123\");\n        assertEquals(\"1.23\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNegativeCent() {\n        String result = AmountUtil.convertCent2Dollar(\"-123\");\n        assertEquals(\"-1.23\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withZeroCent() {\n        String result = AmountUtil.convertCent2Dollar(\"0\");\n        assertEquals(\"0.00\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withEmptyString() {\n        String result = AmountUtil.convertCent2Dollar(\"\");\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNull() {\n        String result = AmountUtil.convertCent2Dollar(null);\n        assertEquals(\"\", result);\n    }\n}","import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class AmountUtilTest {\n\n    @Test\n    public void convertCent2Dollar_withThreeDigitCentValue_returnsCorrectDollarValue() {\n        String result = AmountUtil.convertCent2Dollar(\"100\");\n        assertEquals(\"1.00\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withSingleDigitCentValue_returnsCorrectDollarValue() {\n        String result = AmountUtil.convertCent2Dollar(\"1\");\n        assertEquals(\"0.01\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withEmptyString_returnsEmptyString() {\n        String result = AmountUtil.convertCent2Dollar(\"\");\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNull_returnsEmptyString() {\n        String result = AmountUtil.convertCent2Dollar(null);\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void convertCent2Dollar_withNegativeCentValue_returnsCorrectDollarValue() {\n        String result = AmountUtil.convertCent2Dollar(\"-100\");\n        assertEquals(\"-1.00\", result);\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#11": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockMultipartFile;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class LocalFileServiceTest {\n\n    @Mock\n    private ISysConfigService sysConfigService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrl_publicFile_returnsUrl() {\n        // Given\n        MultipartFile multipartFile = new MockMultipartFile(\"file\", \"Hello, World!\".getBytes());\n        String saveDirAndFileName = \"test.txt\";\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/public/path\");\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://localhost\");\n\n        // When\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, multipartFile, saveDirAndFileName);\n\n        // Then\n        assertEquals(\"http://localhost/test.txt\", result);\n    }\n\n    @Test\n    public void upload2PreviewUrl_privateFile_returnsFileName() {\n        // Given\n        MultipartFile multipartFile = new MockMultipartFile(\"file\", \"Hello, World!\".getBytes());\n        String saveDirAndFileName = \"test.txt\";\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/private/path\");\n\n        // When\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, multipartFile, saveDirAndFileName);\n\n        // Then\n        assertEquals(\"test.txt\", result);\n    }\n}","import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockMultipartFile;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class LocalFileServiceTest {\n\n    @Mock\n    private ISysConfigService sysConfigService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrl_publicFile_returnsUrl() {\n        // Given\n        MultipartFile multipartFile = new MockMultipartFile(\"file\", \"Hello, World!\".getBytes());\n        String saveDirAndFileName = \"test.txt\";\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/public/path\");\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://localhost\");\n\n        // When\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, multipartFile, saveDirAndFileName);\n\n        // Then\n        assertEquals(\"http://localhost/test.txt\", result);\n    }\n\n    @Test\n    public void upload2PreviewUrl_privateFile_returnsFileName() {\n        // Given\n        MultipartFile multipartFile = new MockMultipartFile(\"file\", \"Hello, World!\".getBytes());\n        String saveDirAndFileName = \"test.txt\";\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/private/path\");\n\n        // When\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, multipartFile, saveDirAndFileName);\n\n        // Then\n        assertEquals(\"test.txt\", result);\n    }\n}","import com.jeequan.jeepay.components.oss.service.LocalFileService;\nimport com.jeequan.jeepay.components.oss.constant.OssSavePlaceEnum;\nimport com.jeequan.jeepay.core.service.ISysConfigService;\nimport com.jeequan.jeepay.components.oss.config.OssYmlConfig;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockMultipartFile;\n\nimport java.io.File;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class LocalFileServiceTest {\n\n    @InjectMocks\n    private LocalFileService localFileService;\n\n    @Mock\n    private ISysConfigService sysConfigService;\n\n    @Mock\n    private OssYmlConfig ossYmlConfig;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void upload2PreviewUrlReturnsCorrectUrlForPublicFile() {\n        MockMultipartFile multipartFile = new MockMultipartFile(\"file\", \"test.txt\", \"text/plain\", \"test data\".getBytes());\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/public/path\");\n        when(sysConfigService.getDBApplicationConfig().getOssPublicSiteUrl()).thenReturn(\"http://localhost\");\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, multipartFile, \"test.txt\");\n        assertEquals(\"http://localhost/test.txt\", result);\n    }\n\n    @Test\n    public void upload2PreviewUrlReturnsFileNameForPrivateFile() {\n        MockMultipartFile multipartFile = new MockMultipartFile(\"file\", \"test.txt\", \"text/plain\", \"test data\".getBytes());\n        when(ossYmlConfig.getOss().getFilePrivatePath()).thenReturn(\"/private/path\");\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PRIVATE, multipartFile, \"test.txt\");\n        assertEquals(\"test.txt\", result);\n    }\n\n    @Test\n    public void upload2PreviewUrlCreatesDirectoryIfNotExists() {\n        MockMultipartFile multipartFile = new MockMultipartFile(\"file\", \"test.txt\", \"text/plain\", \"test data\".getBytes());\n        when(ossYmlConfig.getOss().getFilePublicPath()).thenReturn(\"/public/path\");\n        String result = localFileService.upload2PreviewUrl(OssSavePlaceEnum.PUBLIC, multipartFile, \"dir/test.txt\");\n        File dir = new File(\"/public/path/dir\");\n        assertTrue(dir.exists());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#12": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.SysUser;\nimport com.jeequan.jeepay.service.impl.SysUserService;\nimport com.jeequan.jeepay.service.mapper.SysUserMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\n\npublic class SysUserServiceTest {\n\n    @InjectMocks\n    private SysUserService sysUserService;\n\n    @Mock\n    private SysUserMapper sysUserMapper;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void updateSysUserUpdatesExistingUser() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setLoginUsername(\"oldUsername\");\n        sysUser.setTelphone(\"oldPhone\");\n\n        SysUser updatedSysUser = new SysUser();\n        updatedSysUser.setSysUserId(1L);\n        updatedSysUser.setLoginUsername(\"newUsername\");\n        updatedSysUser.setTelphone(\"newPhone\");\n\n        when(sysUserMapper.selectById(1L)).thenReturn(sysUser);\n        sysUserService.updateSysUser(updatedSysUser);\n        verify(sysUserMapper).updateById(updatedSysUser);\n    }\n\n    @Test\n    public void updateSysUserThrowsExceptionWhenUserDoesNotExist() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n\n        when(sysUserMapper.selectById(1L)).thenReturn(null);\n        assertThrows(BizException.class, () -> sysUserService.updateSysUser(sysUser));\n    }\n\n    @Test\n    public void updateSysUserThrowsExceptionWhenUsernameAlreadyExists() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setLoginUsername(\"oldUsername\");\n\n        SysUser updatedSysUser = new SysUser();\n        updatedSysUser.setSysUserId(1L);\n        updatedSysUser.setLoginUsername(\"newUsername\");\n\n        when(sysUserMapper.selectById(1L)).thenReturn(sysUser);\n        when(sysUserMapper.selectOne(new QueryWrapper<SysUser>().eq(\"login_username\", \"newUsername\"))).thenReturn(new SysUser());\n        assertThrows(BizException.class, () -> sysUserService.updateSysUser(updatedSysUser));\n    }\n\n    @Test\n    public void updateSysUserThrowsExceptionWhenPhoneAlreadyExists() {\n        SysUser sysUser = new SysUser();\n        sysUser.setSysUserId(1L);\n        sysUser.setTelphone(\"oldPhone\");\n\n        SysUser updatedSysUser = new SysUser();\n        updatedSysUser.setSysUserId(1L);\n        updatedSysUser.setTelphone(\"newPhone\");\n\n        when(sysUserMapper.selectById(1L)).thenReturn(sysUser);\n        when(sysUserMapper.selectOne(new QueryWrapper<SysUser>().eq(\"telphone\", \"newPhone\"))).thenReturn(new SysUser());\n        assertThrows(BizException.class, () -> sysUserService.updateSysUser(updatedSysUser));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#13": {
    "ut_code": ["import com.jeequan.jeepay.core.ctrls.AbstractCtrl;\nimport com.jeequan.jeepay.core.beans.RequestKitBean;\nimport com.jeequan.jeepay.core.exception.BizException;\nimport com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class AbstractCtrlTest {\n\n    @InjectMocks\n    private AbstractCtrl abstractCtrl;\n\n    @Mock\n    private RequestKitBean requestKitBean;\n\n    private MockHttpServletRequest request;\n    private MockHttpServletResponse response;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        request = new MockHttpServletRequest();\n        response = new MockHttpServletResponse();\n    }\n\n    @Test\n    public void getPageIndexReturnsDefaultWhenNoPageIndexProvided() {\n        when(requestKitBean.getReqParamJSON()).thenReturn(new JSONObject());\n        assertEquals(1, abstractCtrl.getPageIndex());\n    }\n\n    @Test\n    public void getPageIndexReturnsProvidedPageIndex() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"pageNumber\", 5);\n        when(requestKitBean.getReqParamJSON()).thenReturn(jsonObject);\n        assertEquals(5, abstractCtrl.getPageIndex());\n    }\n\n    @Test\n    public void getPageSizeReturnsDefaultWhenNoPageSizeProvided() {\n        when(requestKitBean.getReqParamJSON()).thenReturn(new JSONObject());\n        assertEquals(20, abstractCtrl.getPageSize());\n    }\n\n    @Test\n    public void getPageSizeReturnsProvidedPageSize() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"pageSize\", 50);\n        when(requestKitBean.getReqParamJSON()).thenReturn(jsonObject);\n        assertEquals(50, abstractCtrl.getPageSize());\n    }\n\n    @Test\n    public void getValRequiredThrowsExceptionWhenValueIsEmpty() {\n        when(requestKitBean.getReqParamJSON()).thenReturn(new JSONObject());\n        assertThrows(BizException.class, () -> abstractCtrl.getValRequired(\"key\", String.class));\n    }\n\n    @Test\n    public void getValRequiredReturnsValueWhenValueIsNotEmpty() {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"key\", \"value\");\n        when(requestKitBean.getReqParamJSON()).thenReturn(jsonObject);\n        assertEquals(\"value\", abstractCtrl.getValRequired(\"key\", String.class));\n    }\n}",""]
  },
  "java_ut_eval_case#jeepay#14": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.mockito.Mockito.*;\n\nimport com.jeequan.jeepay.core.entity.MchApp;\nimport com.jeequan.jeepay.core.entity.MchInfo;\nimport com.jeequan.jeepay.core.entity.PayInterfaceConfig;\nimport com.jeequan.jeepay.core.entity.PayInterfaceDefine;\nimport com.jeequan.jeepay.core.constants.CS;\nimport com.jeequan.jeepay.core.exception.BizException;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass PayInterfaceConfigServiceTest {\n\n    @InjectMocks\n    private PayInterfaceConfigService payInterfaceConfigService;\n\n    @Mock\n    private MchAppService mchAppService;\n\n    @Mock\n    private MchInfoService mchInfoService;\n\n    @Mock\n    private PayInterfaceDefineService payInterfaceDefineService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void selectAllPayIfConfigListByAppId_HappyPath() {\n        String appId = \"testAppId\";\n\n        MchApp mchApp = new MchApp();\n        mchApp.setState(CS.YES);\n\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setState(CS.YES);\n        mchInfo.setType(CS.MCH_TYPE_NORMAL);\n\n        when(mchAppService.getById(appId)).thenReturn(mchApp);\n        when(mchInfoService.getById(mchApp.getMchNo())).thenReturn(mchInfo);\n\n        List<PayInterfaceDefine> expectedList = Arrays.asList(new PayInterfaceDefine());\n        when(payInterfaceDefineService.list(any())).thenReturn(expectedList);\n\n        List<PayInterfaceDefine> actualList = payInterfaceConfigService.selectAllPayIfConfigListByAppId(appId);\n\n        assertEquals(expectedList, actualList);\n    }\n\n    @Test\n    void selectAllPayIfConfigListByAppId_InvalidMchApp() {\n        String appId = \"testAppId\";\n\n        MchApp mchApp = new MchApp();\n        mchApp.setState(CS.NO);\n\n        when(mchAppService.getById(appId)).thenReturn(mchApp);\n\n        assertThrows(BizException.class, () -> payInterfaceConfigService.selectAllPayIfConfigListByAppId(appId));\n    }\n\n    @Test\n    void selectAllPayIfConfigListByAppId_InvalidMchInfo() {\n        String appId = \"testAppId\";\n\n        MchApp mchApp = new MchApp();\n        mchApp.setState(CS.YES);\n\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setState(CS.NO);\n\n        when(mchAppService.getById(appId)).thenReturn(mchApp);\n        when(mchInfoService.getById(mchApp.getMchNo())).thenReturn(mchInfo);\n\n        assertThrows(BizException.class, () -> payInterfaceConfigService.selectAllPayIfConfigListByAppId(appId));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#15": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\n\nclass PayMchNotifyServiceTest {\n\n    @InjectMocks\n    private PayMchNotifyService payMchNotifyService;\n\n    @Mock\n    private MchNotifyRecordService mchNotifyRecordService;\n\n    @Mock\n    private ConfigContextQueryService configContextQueryService;\n\n    @Mock\n    private IMQSender mqSender;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should not send notification when notifyUrl is empty\")\n    void shouldNotSendNotificationWhenNotifyUrlIsEmpty() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"\");\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mchNotifyRecordService, never()).findByRefundOrder(anyString());\n    }\n\n    @Test\n    @DisplayName(\"Should not send notification when notification record already exists\")\n    void shouldNotSendNotificationWhenNotificationRecordAlreadyExists() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://example.com/notify\");\n        when(mchNotifyRecordService.findByRefundOrder(anyString())).thenReturn(new MchNotifyRecord());\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mqSender, never()).send(any(PayOrderMchNotifyMQ.class));\n    }\n\n    @Test\n    @DisplayName(\"Should send notification when notification record does not exist\")\n    void shouldSendNotificationWhenNotificationRecordDoesNotExist() {\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://example.com/notify\");\n        when(mchNotifyRecordService.findByRefundOrder(anyString())).thenReturn(null);\n\n        payMchNotifyService.refundOrderNotify(refundOrder);\n\n        verify(mqSender).send(any(PayOrderMchNotifyMQ.class));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#16": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.RefundOrder;\nimport com.jeequan.jeepay.pay.rqrs.msg.ChannelRetMsg;\nimport com.jeequan.jeepay.pay.service.PayMchNotifyService;\nimport com.jeequan.jeepay.pay.service.RefundOrderProcessService;\nimport com.jeequan.jeepay.service.impl.RefundOrderService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.mockito.Mockito.*;\n\npublic class RefundOrderProcessServiceTest {\n\n    @InjectMocks\n    private RefundOrderProcessService refundOrderProcessService;\n\n    @Mock\n    private RefundOrderService refundOrderService;\n\n    @Mock\n    private PayMchNotifyService payMchNotifyService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void shouldHandleRefundOrderWhenChannelStateIsConfirmSuccess() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        channelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n\n        when(refundOrderService.updateIng2Success(anyString(), anyString())).thenReturn(true);\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertTrue(result);\n        verify(payMchNotifyService, times(1)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    public void shouldHandleRefundOrderWhenChannelStateIsConfirmFail() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        channelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_FAIL);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n\n        when(refundOrderService.updateIng2Fail(anyString(), anyString(), anyString(), anyString())).thenReturn(true);\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertTrue(result);\n        verify(payMchNotifyService, times(1)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    public void shouldNotHandleRefundOrderWhenChannelStateIsNotConfirmSuccessOrFail() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        RefundOrder refundOrder = new RefundOrder();\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertTrue(result);\n        verify(payMchNotifyService, times(0)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    public void shouldNotNotifyWhenNotifyUrlIsEmpty() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        channelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n        RefundOrder refundOrder = new RefundOrder();\n\n        when(refundOrderService.updateIng2Success(anyString(), anyString())).thenReturn(true);\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertTrue(result);\n        verify(payMchNotifyService, times(0)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    public void shouldReturnFalseWhenUpdateIng2SuccessFails() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        channelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_SUCCESS);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n\n        when(refundOrderService.updateIng2Success(anyString(), anyString())).thenReturn(false);\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertFalse(result);\n        verify(payMchNotifyService, times(0)).refundOrderNotify(any(RefundOrder.class));\n    }\n\n    @Test\n    public void shouldReturnFalseWhenUpdateIng2FailFails() {\n        // Given\n        ChannelRetMsg channelRetMsg = new ChannelRetMsg();\n        channelRetMsg.setChannelState(ChannelRetMsg.ChannelState.CONFIRM_FAIL);\n        RefundOrder refundOrder = new RefundOrder();\n        refundOrder.setNotifyUrl(\"http://notify.url\");\n\n        when(refundOrderService.updateIng2Fail(anyString(), anyString(), anyString(), anyString())).thenReturn(false);\n\n        // When\n        boolean result = refundOrderProcessService.handleRefundOrder4Channel(channelRetMsg, refundOrder);\n\n        // Then\n        assertFalse(result);\n        verify(payMchNotifyService, times(0)).refundOrderNotify(any(RefundOrder.class));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#17": {
    "ut_code": ["import com.jeequan.jeepay.core.entity.PayOrderDivisionRecord;\nimport com.jeequan.jeepay.service.impl.PayOrderDivisionRecordService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n@SpringBootTest\npublic class PayOrderDivisionRecordServiceTest {\n\n    @InjectMocks\n    private PayOrderDivisionRecordService payOrderDivisionRecordService;\n\n    @Mock\n    private PayOrderDivisionRecordMapper payOrderDivisionRecordMapper;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should update record success or fail when records are not null or empty\")\n    public void shouldUpdateRecordSuccessOrFailWhenRecordsAreNotNullOrEmpty() {\n        // Given\n        List<PayOrderDivisionRecord> records = Arrays.asList(new PayOrderDivisionRecord(), new PayOrderDivisionRecord());\n        Byte state = 1;\n        String channelBatchOrderId = \"123\";\n        String channelRespResult = \"result\";\n\n        when(payOrderDivisionRecordMapper.update(any(), any())).thenReturn(true);\n\n        // When\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, state, channelBatchOrderId, channelRespResult);\n\n        // Then\n        verify(payOrderDivisionRecordMapper, times(1)).update(any(), any());\n    }\n\n    @Test\n    @DisplayName(\"Should not update record success or fail when records are null or empty\")\n    public void shouldNotUpdateRecordSuccessOrFailWhenRecordsAreNullOrEmpty() {\n        // Given\n        List<PayOrderDivisionRecord> records = Arrays.asList();\n        Byte state = 1;\n        String channelBatchOrderId = \"123\";\n        String channelRespResult = \"result\";\n\n        // When\n        payOrderDivisionRecordService.updateRecordSuccessOrFail(records, state, channelBatchOrderId, channelRespResult);\n\n        // Then\n        verify(payOrderDivisionRecordMapper, times(0)).update(any(), any());\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#18": {
    "ut_code": ["import com.jeequan.jeepay.core.utils.JeepayKit;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class JeepayKitTest {\n\n    @Test\n    @DisplayName(\"Should return WX_BAR when barcode starts with 10 and has length 18\")\n    public void shouldReturnWxBarWhenBarcodeStartsWith10AndHasLength18() {\n        String result = JeepayKit.getPayWayCodeByBarCode(\"101234567890123456\");\n        assertEquals(\"WX_BAR\", result);\n    }\n\n    @Test\n    @DisplayName(\"Should return ALI_BAR when barcode starts with 25 and has length between 16 and 24\")\n    public void shouldReturnAliBarWhenBarcodeStartsWith25AndHasLengthBetween16And24() {\n        String result = JeepayKit.getPayWayCodeByBarCode(\"251234567890123456\");\n        assertEquals(\"ALI_BAR\", result);\n    }\n\n    @Test\n    @DisplayName(\"Should return YSF_BAR when barcode starts with 62 and has length 19\")\n    public void shouldReturnYsfBarWhenBarcodeStartsWith62AndHasLength19() {\n        String result = JeepayKit.getPayWayCodeByBarCode(\"6212345678901234567\");\n        assertEquals(\"YSF_BAR\", result);\n    }\n\n    @Test\n    @DisplayName(\"Should throw BizException when barcode is empty\")\n    public void shouldThrowBizExceptionWhenBarcodeIsEmpty() {\n        assertThrows(BizException.class, () -> JeepayKit.getPayWayCodeByBarCode(\"\"));\n    }\n\n    @Test\n    @DisplayName(\"Should throw BizException when barcode does not match any pattern\")\n    public void shouldThrowBizExceptionWhenBarcodeDoesNotMatchAnyPattern() {\n        assertThrows(BizException.class, () -> JeepayKit.getPayWayCodeByBarCode(\"123456789012345678\"));\n    }\n}"]
  },
  "java_ut_eval_case#jeepay#19": {
    "ut_code": ["import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.mockito.Mockito.*;\n\nclass ConfigContextServiceTest {\n\n    @Mock\n    MchInfoService mchInfoService;\n\n    @Mock\n    MchAppService mchAppService;\n\n    @InjectMocks\n    ConfigContextService configContextService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Should initialize merchant info config context when merchant exists\")\n    void shouldInitMchInfoConfigContextWhenMerchantExists() {\n        String mchNo = \"123\";\n        MchInfo mchInfo = new MchInfo();\n        mchInfo.setMchNo(mchNo);\n        when(mchInfoService.getById(mchNo)).thenReturn(mchInfo);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n\n        verify(mchInfoService, times(1)).getById(mchNo);\n    }\n\n    @Test\n    @DisplayName(\"Should not initialize merchant info config context when merchant does not exist\")\n    void shouldNotInitMchInfoConfigContextWhenMerchantDoesNotExist() {\n        String mchNo = \"123\";\n        when(mchInfoService.getById(mchNo)).thenReturn(null);\n\n        configContextService.initMchInfoConfigContext(mchNo);\n\n        verify(mchInfoService, times(1)).getById(mchNo);\n    }\n}"]
  }
}